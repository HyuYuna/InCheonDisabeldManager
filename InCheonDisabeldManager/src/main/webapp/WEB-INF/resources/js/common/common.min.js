if(!Object) {
	var Object = {};
}

if(!Object.values) {
	Object.values = function(obj) {
		var vals = [];

		for(var key in obj) {
			if(obj.hasOwnProperty(key)) {
				vals.push(obj[key]);
			}
		}
		return vals;
	}
}

$(document).keydown(function(e) {
    key = (e) ? e.keyCode : event.keyCode;

    var t = document.activeElement;

    if (key == 8) {
        if (key == 8) {
            if (t.tagName != "INPUT" && t.tagName != "TEXTAREA") {
                if (e) {
                    e.preventDefault();
                } else {
                    event.keyCode = 0;
                    event.returnValue = false;
                }
            }else if(t.type == "checkbox" || t.type =="radio"){
            	if (e) {
                    e.preventDefault();
                } else {
                    event.keyCode = 0;
                    event.returnValue = false;
                }
            }else if(t.readOnly){
            	if (e) {
                    e.preventDefault();
                } else {
                    event.keyCode = 0;
                    event.returnValue = false;
                }
            }
        } else {
            if (e) {
                e.preventDefault();
            } else {
                event.keyCode = 0;
                event.returnValue = false;
            }
        }
    }
});
/*
$(document).keydown(function(e){
	if(e.keyCode === 8) {
		if(e.target.nodeName != "INPUT" && e.target.nodeName != "TEXTAREA") {
			return false;
		}
    }
});
*/

window.history.forward(0);


//-- GRIT namespace setting	--------------------------------------------------------------
var GRIT = new (function() {
	var _contextRoot  		= window["contextRoot"] || "";
	var _webAppPath   		= null;
	var _loadTime     		= null;
	var __setLoadTime 		= null;

	this.getContextRoot = function () { return _contextRoot; };
	this.getWebAppPath = function() {
		if(_webAppPath == null) {
			_webAppPath = location.protocol + "//" + location.hostname +
				((!location.port || location.port == "80") ? "" : ":" + location.port) +
				this.getContextRoot();
		}
		return _webAppPath;
	};

	this.setLoadTime = function(millisecond) {
		if(top == window) {
			_loadTime = new Date(millisecond);
			__setLoadTime = new Date();
		} else { top.GRIT.setLoadTime(millisecond); }
	};

	this.getCurTime = function() {	// server side sync time
		if(top == window) {
			if(_loadTime != null) {
				var now = new Date();
				var passing = now - __setLoadTime;

				return new Date(_loadTime.getTime() + passing);
			} else { return new Date(); }
		} else { return top.GRIT.getCurTime(); }
	};

	// 브라우져 정보
	this.getBrowser = function(){
		var vbrowser = {BROWSER:"", VERSION:"" ,MSIE:""};

		var agent = navigator.userAgent.toLowerCase();
        name = navigator.appName;
        vbrowser.MSIE = false;

	    // MS 계열 브라우저를 구분하기 위함.
	    if(name === 'Microsoft Internet Explorer' || agent.indexOf('trident') > -1 || agent.indexOf('edge/') > -1) {
	    	vbrowser.BROWSER = 'IE';
	        if(name === 'Microsoft Internet Explorer') { // IE old version (IE 10 or Lower)
	            agent = /msie ([0-9]{1,}[\.0-9]{0,})/.exec(agent);
	            vbrowser.VERSION = parseInt(agent[1]);
	        } else { // IE 11+
	            if(agent.indexOf('trident') > -1) { // IE 11
		            vbrowser.VERSION = 11;
	            } else if(agent.indexOf('edge/') > -1) { // Edge
	            	vbrowser.BROWSER = 'EDGE';
	            }
	        }
	        vbrowser.MSIE = true;
	    } else if(agent.indexOf('safari') > -1) { // Chrome or Safari
	        if(agent.indexOf('opr') > -1) { // Opera
	            vbrowser.BROWSER = 'OPERA';
	        } else if(agent.indexOf('chrome') > -1) { // Chrome
	            vbrowser.BROWSER = 'CHROME';
	        } else { // Safari
	            vbrowser.BROWSER = 'SAFARI';
	        }
	    } else if(agent.indexOf('firefox') > -1) { // Firefox
	    	vbrowser.BROWSER = 'FIREFOX';
	    }
		return vbrowser;
	}
})();

GRIT.commonPopupList	= [];

GRIT.debug = function(obj){
	try {
	} catch(e) {
		if(typeof obj == "object") {
			var msg = "";
			for(key in obj) {
				msg += key + " = " + obj[key] + "\n";
			}
			alert(msg);
		} else {
			alert(obj);
		}
	}
};

//********************************************************************************************
//검증 함수
//********************************************************************************************
GRIT.valid = new function(){};

//입력값이 NULL인지 체크
GRIT.valid.isNull = function(asValue){
    if (asValue == null || asValue == undefined || asValue.toString().replace(/ /g,"") == ""){
        return true;
    }
    return false;
};


//숫자검증
GRIT.valid.isNum = function(asValue){
	if (GRIT.valid.isNull(asValue)) return false;

	for (var i = 0; i < asValue.length; i++){
		if (asValue.charAt(i) < '0' || asValue.charAt(i) > '9'){
			return false;
		}
	}
	return true;
}


//영문자검증
GRIT.valid.isAlpha = function(asValue){
	if(GRIT.valid.isNull(asValue)) return false

	for(var i = 0; i < asValue.length; i++){
		if(!((asValue.charAt(i) >='a' && asValue <= 'z') || (asValue.charAt(i) >= 'A' && asValue <= 'Z'))){
			return false;
		}
	}
	return true;
}

//한글검증
GRIT.valid.isHangul = function(asValue){
	if(GRIT.valid.isNull(asValue)) return false;

	for(var i = 0; i < asValue.length; i++){
		var c = escape(asValue.charAt(i));

		if(c.indexOf("%u") == -1){
			return false;
		}
	}
	return true;
}

/*
입력값이 이메일 형식인지 체크
ex) if(!GRIT.valid.isEmail(form.email.value)) {
        alert("올바른 이메일 주소가 아닙니다.");
    }
*/
GRIT.valid.isEmail = function(asValue){
	var strFormat = /^((\w|[\-\.])+)@((\w|[\-\.])+)\.([A-Za-z]+)$/;
	return GRIT.valid.isFormat(asValue, strFormat);
}

//입력값이 전화번호 형식(숫자-숫자-숫자)인지 체크
GRIT.valid.isPhone = function(asValue){
	var strFormat = /^(\d+)-(\d+)-(\d+)$/;
	return GRIT.valid.isFormat(asValue, strFormat);
}

/*
입력값이 사용자가 정의한 포맷 형식인지 체크
자세한 format 형식은 자바스크립트의 'regular expression'을 참조
*/
GRIT.valid.isFormat = function(asValue, asFormat){
	if(GRIT.valid.isNull(asValue)) return true;
	if(asValue.search(asFormat) != -1) return true; //올바른 포맷 형식
	return false;
}

// 전화번호 국번검증
GRIT.valid.isPhoneNum = function(asPhoneNum){
	if (GRIT.valid.isNull(asPhoneNum)) return false;
	if (asPhoneNum != "02"  && asPhoneNum != "031" && asPhoneNum != "032" && asPhoneNum != "033" && asPhoneNum != "041" &&
		asPhoneNum != "042" && asPhoneNum != "043" && asPhoneNum != "051" && asPhoneNum != "052" && asPhoneNum != "053" &&
		asPhoneNum != "054" && asPhoneNum != "055" && asPhoneNum != "061" && asPhoneNum != "062" && asPhoneNum != "063" &&
		asPhoneNum != "064" && asPhoneNum != "011" && asPhoneNum != "016" && asPhoneNum != "017" && asPhoneNum != "018" &&
		asPhoneNum != "019" && asPhoneNum != "010"){
		return false;
	}
	return true;
}


//********************************************************************************************
//문자열 함수
//********************************************************************************************
GRIT.string = new function(){};


GRIT.string.byteLength = function(s) {
	//for(b=i=0;c=s.charCodeAt(i++);b+=c>>11?3:c>>7?2:1);
	for(b=i=0;c=s.charCodeAt(i++);b+=c>>7?2:1);
    return b;
};

/*
* 문자열에서 좌우 공백제거
* alert("[" + GRIT.string.trim(" 가나다라바 ") + "]");
*/
GRIT.string.trim = function(asValue){
	asValue += '';
	return asValue.replace(/^\s*|\s*$/g, '');
}

/*
* 문자열을 숫자 포맷으로 변경한다.(abDot : true(소수점 포함), false(소수점 미포함))
* alert(GRIT.string.toNumberFormatString("123456.10",true));
*/
GRIT.string.toNumberFormatString = function(asValue, abDot){
	if (GRIT.valid.isNull(asValue)) return "";

	var intNumber = GRIT.string.removeComma(asValue, abDot);
	var bolMinus = false;
	var bolDot = false;
	var dotPos;
	var dotU;
	var dotD;
	var commaFlag;
	var strOut = "";

	if (intNumber < 0){
		intNumber *= -1;
		bolMinus = true;
	}

	if (intNumber.toString().indexOf(".") > -1){
		if (abDot == false){
			intNumber = intNumber.substring(0, intNumber.toString().indexOf("."));
		}
	}

	if (intNumber.toString().indexOf(".") > -1){
		dotPos = intNumber.toString().split(".");
		dotU = Number(dotPos[0], 10).toString();
		dotD = dotPos[1];
		bolDot = true;
	} else {
		dotU = Number(intNumber.toString(), 10).toString();
		dotD = "";
	}

	commaFlag = dotU.length % 3;

	if (commaFlag){
		strOut = dotU.substring(0, commaFlag);
		if (dotU.length > 3) strOut += ",";
	}

	for (var i = commaFlag; i < dotU.length; i+=3){
		strOut += dotU.substring(i, i + 3) ;
		if (i < dotU.length - 3) strOut += ",";
	}

	if (bolMinus) strOut = "-" + strOut;
	if (bolDot) strOut = strOut + "." + dotD;

	return strOut;
}


/*
* 입력값에서 콤마 및 공백을 없애고 숫자형식 문자열을 되돌린다.
* alert(GRIT.string.getNumberTypeString("123,456"));
*/
GRIT.string.getNumberTypeString = function(asValue){
	var	lsRet = GRIT.string.removeComma(asValue,false);
	if(GRIT.valid.isNull(lsRet)){
		return "0";
	} else {
		return lsRet;
	}
}

//입력값에서 콤마 및 공백을 없앤다.(abDot : true(소수점 포함), false(소수점 미포함))
GRIT.string.removeComma = function(asValue, abDot){
	var intNumber = asValue.toString().replace(/,/g, "").replace(/ /g, "");

	if (intNumber.toString().indexOf(".") > -1){
		if (abDot == false){
			intNumber = intNumber.substring(0, intNumber.toString().indexOf("."));
		}
	}
	return intNumber;
}

/*
* Left 빈자리 만큼 strPadChar 을 붙인다.
* alert(GRIT.string.lPad("123",5,"0"));
*/
GRIT.string.lPad = function(strValue, intLength, strPadChar){
	var strTemp  = "";
	var strValue = "" + strValue;
	var intPadCnt = intLength - strValue.length;

	for (var i = 0; i < intPadCnt; i++) strTemp += strPadChar;

	return strTemp + strValue;
}

/*
* Right 빈자리 만큼 strPadChar 을 붙인다.
* alert(GRIT.string.rPad("123",5,"0"));
*/
GRIT.string.rPad = function(strValue, intLength, strPadChar){
	var strTemp  = "";
	var strValue = "" + strValue;

	var intPadCnt = intLength - strValue.length;

	for (var i = 0; i < intPadCnt; i++) strTemp += strPadChar;

	return strValue + strTemp;
}

/*
* 대문자변환
* alert(GRIT.string.toUpperCase("abcd"));
*/
GRIT.string.toUpperCase = function(asValue){
	if(GRIT.valid.isNull(asValue)) return asValue;
	return asValue.toUpperCase();
}

/*
* 소문자변환
* alert(GRIT.string.toLowerCase("ABCD"));
*/
GRIT.string.toLowerCase = function(asValue){
	if(GRIT.valid.isNull(asValue)) return asValue;
	return asValue.toLowerCase();
}

/*
* 첫글자를 대문자로
* alert(GRIT.string.initCap("abcde"));
*/
GRIT.string.initCap = function(asValue){
	if(GRIT.valid.isNull(asValue)) return asValue;
	var str   = asValue.substring(0,1).toUpperCase() + asValue.substring(1);
	return str;
}

//********************************************************************************************
//날짜, 시간 관련 함수
//********************************************************************************************
GRIT.date = new function(){};

//유효한(존재하는) 년(年)인지 체크
GRIT.date.isValidYear = function(yyyy){
	var intYear = parseInt(yyyy, 10);
	return (intYear >= 1900 && intYear <= 2999);
}

//유효한(존재하는) 월(月)인지 체크
GRIT.date.isValidMonth = function(mm){
	var intMonth = parseInt(mm, 10);
	return (intMonth >= 1 && intMonth <= 12);
}

//유효한(존재하는) 일(日)인지 체크
GRIT.date.isValidDay = function(yyyy, mm, dd){
	var intMonth = parseInt(mm, 10) - 1;
	var intDay = parseInt(dd, 10);
	var arrLastDay = new Array(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);

	if ((yyyy % 4 == 0 && yyyy % 100 != 0) || yyyy % 400 == 0) arrLastDay[1] = 29;
	return (intDay >= 1 && intDay <= arrLastDay[intMonth]);
}

//유효한(존재하는) 시(時)인지 체크
GRIT.date.isValidHour = function(hh){
	var intHour = parseInt(hh, 10);
	return (intHour >= 1 && intHour <= 24);
}

//유효한(존재하는) 분(分)인지 체크
GRIT.date.isValidMin = function(mi){
	var intMin = parseInt(mi, 10);
	return (intMin >= 1 && intMin <= 60);
}

//입력된 날짜값에서 '-', '/', '.', ':', ' '(공백)을 없앤다.
GRIT.date.removeDateTimeFormat = function(asValue){
	return asValue.toString().replace(/-/g, "").replace(/\//g, "").replace(/\./g, "").replace(/:/g, "").replace(/ /g, "");
}

/*
  유효하는(존재하는) 날짜 인지 체크
  ex) var date = form.date.value; //'20160231'
      if (!GRIT.date.isValidDate(date)) {
          alert("올바른 날짜가 아닙니다.");
      }
 */
GRIT.date.isValidDate = function(asDate){
	if (GRIT.valid.isNull(asDate)) return true;

	var strDate = GRIT.date.removeDateTimeFormat(asDate);
	var year  = "";
	var month = "";
	var day   = "";
	var hour  = "";
	var min   = "";

	if (strDate.length == 6){
		year  = strDate.substr(0,4);
		month = strDate.substr(4,2);

		if (parseInt(year, 10) >= 1900 && GRIT.date.isValidMonth(month)) return true;

	} else if (strDate.length == 8){
		year  = strDate.substr(0,4);
		month = strDate.substr(4,2);
		day   = strDate.substr(6,2);

		if (parseInt(year, 10) >= 1900 && GRIT.date.isValidMonth(month) && GRIT.date.isValidDay(year,month,day)) return true;

	} else if (strDate.length == 12) {
		year  = strDate.substr(0,4);
		month = strDate.substr(4,2);
		day   = strDate.substr(6,2);
		hour  = strDate.substr(8,2);
		min   = strDate.substr(10,2);

		if (parseInt(year, 10) >= 1900 && GRIT.date.isValidMonth(month) && GRIT.date.isValidDay(year, month, day) &&
			GRIT.date.isValidHour(hour) && GRIT.date.isValidMin(min)) return true;
	}

	return false;
}

/*
Date 스트링을 자바스크립트 Date 객체로 변환
ex) alert(GRIT.date.toDate("20160329"));
*/
GRIT.date.toDate = function(asDate){
	var strDate = GRIT.date.removeDateTimeFormat(asDate);
	var year  = "";
	var month = "";
	var day   = "";
	var hour  = "";
	var min   = "";

	if(strDate.length == 6){
		year  = strDate.substr(0,4);
		month = strDate.substr(4,2) - 1; // 1월=0,12월=11

		return new Date(year, month, 1);

	} else if (strDate.length == 8){
		year  = strDate.substr(0,4);
		month = strDate.substr(4,2) - 1; // 1월=0,12월=11
		day   = strDate.substr(6,2);

		return new Date(year, month, day);

	} else if (strDate.length == 12) {
		year  = strDate.substr(0,4);
		month = strDate.substr(4,2) - 1; // 1월=0,12월=11
		day   = strDate.substr(6,2);
		hour  = strDate.substr(8,2);
	    min   = strDate.substr(10,2);

		return new Date(year, month, day, hour, min);
	}

	return null;
}

/*
자바스크립트 Date 객체를 Date 스트링(20160329)으로 변환
ex) var date = new Date();
    alert(GRIT.date.toDateString(date, 8));
    aiLength : 8, 12, 14
*/
GRIT.date.toDateString = function(aoDate, aiLength, aPrefix){

	if(GRIT.valid.isNull(aoDate)) return "";

	var year    = aoDate.getFullYear();
	var month   = aoDate.getMonth() + 1; // 1월=0,12월=11이므로 1 더함
	var day     = aoDate.getDate();
	var hour    = aoDate.getHours();
	var min     = aoDate.getMinutes();
	var seconds = aoDate.getSeconds();

	if (("" + month).length   == 1) { month   = "0" + month; }
	if (("" + day).length     == 1) { day     = "0" + day;   }
	if (("" + hour).length    == 1) { hour    = "0" + hour;  }
	if (("" + min).length     == 1) { min     = "0" + min;   }
	if (("" + seconds).length == 1) { seconds = "0" + seconds;}

	if (GRIT.valid.isNull(aPrefix)){
		if (aiLength == 8){
			return ("" + year + month + day);
		} else if (aiLength == 12) {
			return ("" + year + month + day + hour + min);
		} else if (aiLength == 14) {
			return ("" + year + month + day + hour + min + seconds);
		}
	} else {
		if (aiLength == 8){
			return ("" + year + aPrefix + month + aPrefix + day);
		} else if (aiLength == 12) {
			return ("" + year + aPrefix + month + aPrefix + day + " " + hour + ":" + min);
		} else if (aiLength == 14) {
			return ("" + year + aPrefix + month + aPrefix + day + " " + hour + ":" + min + ":" + seconds);
		} else if (aiLength == 6){
			return ("" + year + aPrefix + month);
		}
	}
	return "";
}

/*
  Date 스트링을 yyyy-mm-dd 포맷의 스트링으로 변환.
  ex) alert(GRIT.date.toDateFormatString("20160329"));
 */
GRIT.date.toDateFormatString = function(asDate, aPrefix){

	if(GRIT.valid.isNull(asDate)) return "";

	aPrefix = GRIT.util.nvl(aPrefix,"-");

	var strDate = GRIT.date.removeDateTimeFormat(asDate);
	var strTemp = "";

	if (strDate.length == 6){
		strTemp += strDate.substr(0,4);
		strTemp += aPrefix;
		strTemp += strDate.substr(4,2);

	} else if (strDate.length == 8) {
		strTemp += strDate.substr(0,4);
		strTemp += aPrefix;
		strTemp += strDate.substr(4,2);
		strTemp += aPrefix;
		strTemp += strDate.substr(6,2);

	} else if (strDate.length == 12) {
		strTemp += strDate.substr(0,4);
		strTemp += aPrefix;
		strTemp += strDate.substr(4,2);
		strTemp += aPrefix;
		strTemp += strDate.substr(6,2);
		strTemp += " ";
		strTemp += strDate.substr(8,2);
		strTemp += ":";
		strTemp += strDate.substr(10,2);

	} else if (strDate.length == 14) {
		strTemp += strDate.substr(0,4);
		strTemp += aPrefix;
		strTemp += strDate.substr(4,2);
		strTemp += aPrefix;
		strTemp += strDate.substr(6,2);
		strTemp += " ";
		strTemp += strDate.substr(8,2);
		strTemp += ":";
		strTemp += strDate.substr(10,2);
		strTemp += ":";
		strTemp += strDate.substr(12,2);
	} else {
		strTemp = asDate;
	}

	return strTemp;
}

/*
* 현재 일자를 Date String 형식으로 리턴 (20060329)
* ex) alert(GRIT.date.getNowDateString(8));
*     aiLength : 8, 12, 14
*/
GRIT.date.getNow = function(){
	return GRIT.date.getNowDateString(8,"-");
}

GRIT.date.getNowDateString = function(aiLength, aPrefix){

	if(GRIT.valid.isNull(aiLength)) return "";

	if (GRIT.valid.isNull(aPrefix)){
		return GRIT.date.toDateString(new Date(), aiLength);
	} else {
		return GRIT.date.toDateFormatString(GRIT.date.toDateString(new Date(), aiLength, aPrefix));
	}
}

/*
 * 현재 年을 YYYY형식으로 리턴
 * ex) alert(GRIT.date.getYear());
 */
GRIT.date.getYear = function(){
	return GRIT.date.getNowDateString(12).substr(0,4);
}

/*
 * 현재 月을 MM형식으로 리턴
 * ex) alert(GRIT.date.getMonth());
 */
GRIT.date.getMonth = function(){
	return GRIT.date.getNowDateString(12).substr(4,2);
}

/*
 * 현재 日을 DD형식으로 리턴
 * ex) alert(GRIT.date.getDay());
 */
GRIT.date.getDay = function(){
	return GRIT.date.getNowDateString(12).substr(6,2);
}

/*
 * 현재 년월을 Date Format String 형식으로 리턴 (YYYY-MM) 예 delimiter
 * ex) alert(GRIT.date.getYearMonth("/"));
 */
GRIT.date.getYearMonth = function(delimiter) {
	var strYear  = GRIT.date.getYear();
	var strMonth = GRIT.date.getMonth();

	var strYearMonth = strYear + '' + delimiter + '' + strMonth;
	return strYearMonth;
}

/*
 * 현재 日의 요일을 구한다.
 * ex) alert(GRIT.date.getToDayOfWeek());
 * 숫자형식 : N
 */
GRIT.date.getToDayOfWeek = function(asType){
	var week = new Array('일','월','화','수','목','금','토');
	var now  = new Date();
	var day  = now.getDay(); //일요일=0,월요일=1,...,토요일=6

	if(GRIT.string.toUpperCase(asType) == "N"){
		return day;
	} else {
		return week[day];
	}
}

/*
 * 특정날짜의 요일을 구한다.
 * ex) alert(GRIT.date.getDayOfWeek("20160414"));
 * ex) alert(GRIT.date.getDayOfWeek("2016/04/14"));
 */
GRIT.date.getDayOfWeek = function(asDate,asType){
	var week = new Array('일','월','화','수','목','금','토');
	var now  = GRIT.date.toDate(asDate);
	var day  = now.getDay(); //일요일=0,월요일=1,...,토요일=6

	if(GRIT.string.toUpperCase(asType) == "N"){
		return day;
	} else {
		return week[day];
	}
}

/*
 * 현재날짜의 데이트+시각을 구한다
 * ex) alert(GRIT.date.getDateTime("/"));
 */
GRIT.date.getDateTime = function(aPrefix){
	return GRIT.date.getNowDateString(14, aPrefix);
}

/*
 * 해당일자의 해당월 마지막일 얻기
 * ex) alert(GRIT.date.getLastDay("20160414"));
 * ex) alert(GRIT.date.getLastDay("2016/04/14"));
 */
GRIT.date.getLastDay = function(asDate){

	if(GRIT.valid.isNull(asDate)) return "";

	var arrLastDay = new Array(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);
	var strDate = GRIT.date.removeDateTimeFormat(asDate);
	var year = parseInt(strDate.substr(0,4), 10);
	var month = parseInt(strDate.substr(4,2), 10);

	if ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0) arrLastDay[1] = 29;
	return arrLastDay[month - 1];
}

/*
 * 해당일자의 해당월 마지막 일자 가져오기
 * ex) alert(GRIT.date.getLastDay("2016/04/14"));
 *     alert(GRIT.date.getLastDay("2016/04/14"));
 */
GRIT.date.lastDay = function(asDate, asPrefix){

	if(GRIT.valid.isNull(asDate)) return "";

	var arrLastDay = new Array(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);
	var strDate = GRIT.date.removeDateTimeFormat(asDate);
	var year    = parseInt(strDate.substr(0,4), 10);
	var month   = parseInt(strDate.substr(4,2), 10);
	if ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0) arrLastDay[1] = 29;

	return GRIT.date.toDateFormatString(strDate.substr(0,6) + "" + arrLastDay[month - 1], asPrefix);
}


/*
 * 시작일자와 종료일자를 비교(종료일자가 크면 true, 시작일자가 크면 false)
 * ex) alert(GRIT.date.compareDateFT("2016/04/14", "2016/04/15"));
 *     alert(GRIT.date.compareDateFT("2016/04/15", "2016/04/14"));
 */
GRIT.date.compareDateFT = function(asFDate, asTDate){
	if (!GRIT.date.isValidDate(asFDate) || !GRIT.date.isValidDate(asTDate)) return true;

	var iFDate = parseFloat(GRIT.date.removeDateTimeFormat(asFDate));
	var iTDate = parseFloat(GRIT.date.removeDateTimeFormat(asTDate));

	if (isNaN(iFDate) || isNaN(iTDate)) return true;

	return iFDate <= iTDate ? true : false;
}

/*
 * 시작일자와 종료일자를 계산해서 몇일이 차이가 나는지 계산
 * ex) alert(GRIT.date.getDateDiff('20160413', '20160414'));
 */
GRIT.date.getDateDiff = function(asFromDate, asToDate){
	if(GRIT.valid.isNull(asFromDate)) return null;
	if(GRIT.valid.isNull(asToDate))   return null;

	var sdate = GRIT.date.toDate(asFromDate);
	var edate = GRIT.date.toDate(asToDate);
	var getDiffTime = edate.getTime() - sdate.getTime();

    return Math.floor(getDiffTime / (1000 * 60 * 60 * 24));
}

/*
 * 시작일자와 종료일자를 계산해서 몇년, 몇월, 몇일이 차이가 나는지 계산(결과값은 배열로 넘긴다)
 * ex) alert(GRIT.date.calcDateFT('20160413', '20160414'));
 */
GRIT.date.calcDateFT = function(asFromDate, asToDate){
	if (!GRIT.date.isValidDate(asFromDate) || !GRIT.date.isValidDate(asToDate)) return null;

	var lsFromDate = GRIT.date.removeDateTimeFormat(asFromDate);
	var lsToDate = GRIT.date.removeDateTimeFormat(asToDate);

	if (isNaN(parseFloat(lsFromDate)) || isNaN(parseFloat(lsToDate))) return null;

	var larrRet = new Array(3);
	var liFromDay = 0;
	var liToDay = 0;
	var liTemp = 0;
	var liYear = 0;
	var liMonth = 0;
	var liDay = 0;

	liFromDay = (parseFloat(lsFromDate.substr(0, 4)) * 365) + (parseFloat(lsFromDate.substr(4, 2)) * 30) + parseFloat(lsFromDate.substr(6, 2));
	liToDay = (parseFloat(lsToDate.substr(0, 4)) * 365) + (parseFloat(lsToDate.substr(4, 2)) * 30) + parseFloat(lsToDate.substr(6, 2));

	liTemp = Math.abs(liToDay - liFromDay);

	// 년 계산
	if (liTemp >= 365){
		liYear = parseInt(liTemp / 365);
		liTemp = (liTemp % 365);
	} else {
		liYear = 0;
	}

	// 월 계산
	if (liTemp >= 30){
		liMonth = parseInt(liTemp / 30);
		liTemp = (liTemp % 30);
	} else {
		liMonth = 0;
	}
	liDay = liTemp;
	larrRet[0] = liYear;
	larrRet[1] = liMonth;
	larrRet[2] = liDay;
	return larrRet;
}

GRIT.date.setDateFormatString = function(yy, mm, dd){
    var endDate    = new Date(yy, mm, dd, 0, 0, 0);
    var endYear    = endDate.getFullYear();
    var endMonth   = endDate.getMonth() + 1;
    var endDay     = endDate.getDate();

	if(endMonth < 10 ) { endMonth = "0" + endMonth; }
    if(endDay < 10 )   { endDay   = "0" + endDay; }

    var strDate = endYear + "" + endMonth + "" + endDay;
    return GRIT.date.toDateFormatString(strDate);
}

GRIT.date.getQuickDate = function(aType){
	if(GRIT.valid.isNull(aType)) return "{}";
	var result = {startDate : "", endDate: ""}

	var nowDate  = new Date()
    var nowYear  = nowDate.getFullYear();
    var nowMonth = nowDate.getMonth()+1;
    var nowDay   = nowDate.getDate();

	switch(aType){
		case "1d" :		// 오늘
			result.startDate = GRIT.date.setDateFormatString(nowYear,(nowMonth-1),nowDay);
			result.endDate   = GRIT.date.setDateFormatString(nowYear,(nowMonth-1),nowDay);
			break;
		case "1w" :		// 1주
			result.startDate = GRIT.date.setDateFormatString(nowYear,(nowMonth-1),nowDay-7);
			result.endDate   = GRIT.date.setDateFormatString(nowYear,(nowMonth-1),nowDay);
			break;
		case "15d" :	// 15일
			result.startDate = GRIT.date.setDateFormatString(nowYear,(nowMonth-1),nowDay-15);
			result.endDate   = GRIT.date.setDateFormatString(nowYear,(nowMonth-1),nowDay);
			break;
		case "1m" :		// 1개월
			result.startDate = GRIT.date.setDateFormatString(nowYear,(nowMonth-1)-1,nowDay);
			result.endDate   = GRIT.date.setDateFormatString(nowYear,(nowMonth-1),nowDay);
			break;
		case "tm" :		//이번달
			result.startDate = GRIT.date.setDateFormatString(nowYear,(nowMonth-1),"01");
			result.endDate   = GRIT.date.setDateFormatString(nowYear,(nowMonth-1),nowDay);
			break;
		case "pm" :		//저번달
			result.startDate = GRIT.date.setDateFormatString(nowYear,(nowMonth-2),"01");
			result.endDate   = GRIT.date.setDateFormatString(nowYear,(nowMonth-2),new Date(nowYear,(nowMonth-1),0).getDate());
			break;
		default :
			result.startDate = GRIT.date.setDateFormatString(nowYear,(nowMonth-1),nowDay);
			result.endDate   = GRIT.date.setDateFormatString(nowYear,(nowMonth-1),nowDay);
	}

    return result;
}

/**
 * 현재시간 특정 분단위
 */
GRIT.date.getTime = function(aInt){
	var d = new Date();
	var strTemp;
	var strMinutes;

	if(aInt == 0){
		strMinutes = "0";
	} else {
		strMinutes = Math.floor(d.getMinutes() / aInt) * aInt;
	}
	strTemp = GRIT.string.lPad(d.getHours(), 2, '0') + ":" + GRIT.string.lPad(strMinutes, 2, '0');
	return strTemp;
}


/**
 * 년도(spinner)
 */
GRIT.date.setYearSpinner = function(sObjNm, sVal){
	//var $tgObj = $('#' + sFormId).find('input[name=' + sObjNm + ']'); 셀렉터값 밖에서 찾아서 던질것
	var $tgObj = $(sObjNm);
    $tgObj.spinner();

    if(!GRIT.valid.isNull(sVal)){
        $tgObj.spinner( "value", sVal);
	} else {
		$tgObj.spinner( "value", 2016);
	}
}

/**
 * 달력 기본 세팅
 */
GRIT.date.setDatePicker = function (sObjNm, sVal) {
	//var $tgObj = $('#' + sFormId).find('input[name=' + sObjNm + ']'); 셀렉터값 밖에서 찾아서 던질것
	var $tgObj = $(sObjNm);

	$tgObj.datepicker().next().eq(0).click(function(){
		$(this).prev().eq(0).datepicker('show');
	});

    if(!GRIT.valid.isNull(sVal)){
        $tgObj.val(sVal);
	}
}

/**
 * 달력 기본 세팅 FROM ~ TO
 * stype : 필수 아님(1d:오늘, 1w:1주, 15d:15일, 1m:1개월, tm:이번달, pm:저번달, ext:기타)
 */
GRIT.date.setMultiDatePicker = function (sObjNm1, sObjNm2, stype, sVal1, sVal2) {
	var jsonDate = {}
	var $tgObj1 = $(sObjNm1);
	var $tgObj2 = $(sObjNm2);

	if(!GRIT.valid.isNull(stype)){
		if(stype == "ext"){
			jsonDate = GRIT.date.getQuickDate('custom');
			$tgObj1.val(GRIT.util.nvl(sVal1,jsonDate.startDate));
			$tgObj2.val(GRIT.util.nvl(sVal2,jsonDate.endDate));
		} else {
			jsonDate = GRIT.date.getQuickDate(stype);
			$tgObj1.val(GRIT.util.nvl(sVal1,jsonDate.startDate));
			$tgObj2.val(GRIT.util.nvl(sVal2,jsonDate.endDate));
		}
	} else {
		jsonDate = GRIT.date.getQuickDate('custom');
		$tgObj1.val(GRIT.util.nvl(sVal1,jsonDate.startDate));
		$tgObj2.val(GRIT.util.nvl(sVal2,jsonDate.endDate));
	}

	$($tgObj1.datepicker().next().eq(0)).on("click", function() {
		$(this).prev().eq(0).datepicker('show');
	});

	$($tgObj2.datepicker().next().eq(0)).on("click", function() {
		$(this).prev().eq(0).datepicker('show');
	});
	/*
	$tgObj1.datepicker().next().eq(0).click(function(){
		$(this).prev().eq(0).datepicker('show');
	});

	$tgObj2.datepicker().next().eq(0).click(function(){
		$(this).prev().eq(0).datepicker('show');
	});
	*/

	$tgObj1.datepicker('option', 'maxDate', $tgObj2.val());
	$tgObj1.datepicker('option', 'onClose', function ( selectedDate ) {
		$tgObj2.datepicker('option', 'minDate', selectedDate );
	});

	$tgObj2.datepicker('option', 'minDate', $tgObj2.val());
	$tgObj2.datepicker('option', 'onClose', function ( selectedDate ) {
		$tgObj1.datepicker( 'option', 'maxDate', selectedDate );
	});
}

/**
 * 월달력
 */
GRIT.date.setMonthpicker = function (sObjNm, sVal) {
	var $tgObj = $(sObjNm);

	if(!GRIT.valid.isNull(sVal)){
		$tgObj.val(sVal);
	}

	$tgObj.monthpicker({
		 selectedYear: GRIT.date.getYear()
		,startYear	 : 1980
		,finalYear	 : 2030
	})
	.next().eq(0).click(function(){
		$(this).prev().eq(0).monthpicker("show");
	})
	.bind('monthpicker-click-month', function (e, month) {
		//alert("선택하신 월은 : " + month + "월");
	});
}

/**
 * 특정 날짜의 월요일로 셋팅하기
 */
GRIT.date.setMondaySelect = function (sObjNm, sVal, nVal) {
	var nWeekVal = 0;

	if(!GRIT.valid.isNull(nVal)){
		nWeekVal = nVal;
	}

	var $tgObj = $(sObjNm);

	var sFmVal = GRIT.date.removeDateTimeFormat(sVal);

	var nFnCnt = GRIT.date.getDayOfWeek(sFmVal, "N");

	var year  = "";
	var month = "";
	var day   = "";

	year  = sFmVal.substr(0,4);
	month = sFmVal.substr(4,2);
	day   = sFmVal.substr(6,2);

	var sRstFmVal = GRIT.date.setDateFormatString(year, (month-1), (parseInt(day)-(nFnCnt-1)+(nWeekVal*7)));

	$tgObj.val(sRstFmVal);
}

//********************************************************************************************
//유틸 함수
//********************************************************************************************
GRIT.util = new function(){};

GRIT.util.createSWFEmbedObject = function(target, movie, width, height){
	var idx = (new Date()).getTime();
	var embedTag = (jQuery.browser["msie"] === true) ? '<object id="embedObj_' + idx + '" align="middle" width="'+width+'" height="'+height+'" codebase="http://fpdownload.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=9.0.0.0" classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000">' +
			'<param name="allowScriptAccess" value="always"/>' +
			'<param name="movie" value="' + movie + '"/>' +
			'<param name="wmode" value="transparent"/>' +	//window
			'<param name="menu" value="false"/>' +
			'<param name="scaleMode" value="noScale"/>' +
			'<param name="showMenu" value="false"/>' +
			'<param name="align" value="CT"/>' +
			'<param name="quality" value="high"/>' +
			'<param name="bgcolor" value="#ffffff"/>' +
		'</object>' : '<embed align="middle" width="'+width+'" height="'+height+'"' +
		' pluginspage="http://www.macromedia.com/go/getflashplayer"' +
		' type="application/x-shockwave-flash"' +
		' allowscriptaccess="always"' +
		' bgcolor="#ffffff"' +
		' quality="high"' +
		' menu="false"' +
		' wmode="transparent"' +	//window
		' src="' + movie + '"/>';
	jQuery(target).html(embedTag);
};


GRIT.util.replaceAll = function(inputString, targetString, replacement){
	var v_ret = null;
	var v_regExp = new RegExp(targetString, "g");
	v_ret = inputString.replace(v_regExp, replacement);
	return v_ret;
}

GRIT.util.zerofill = function(val, len, direction, fillStr) {
	var result = "";
	switch(val) {
		case null :
		case undefined : val = ""; break;
		default :
			switch(typeof(val)) {
				case "object" : val = val.toString();
				case "number" : val = val + "";
			}
	}

	if(val.length > len) result = val.substring(0, len);
	else if(val.length == len) result = val;
	else {
		result = val;
		var ch = fillStr || "0",
			loop = len - val.length;
		for(var i=0; i<loop; i++) result = direction == "right" ? result + ch : ch + result;
	}

	return result;
};

GRIT.util.nvl = function(inputString, targetString){
	if(GRIT.valid.isNull(inputString)){
		return targetString;
	} else {
		return inputString;
	}
}

//해당 JSON ROW 삭제
GRIT.util.jsonRowDel = function(json, id, val){
	var index = null;

	for(var i=0; i<json.length; i++){
		if(json[i].id === val){
			index = i;
			break;
		}
	}

	if(index !== null){
		json.splice(index, 1);
	}
}

/**
 * (JSON) 두 JSON 데이터를 합침 - 단, 동일 Key의 값이 다를 경우 targetData를 우선으로 함
 */
GRIT.util.appendData = function(targetData, sourceData){
	if(GRIT.valid.isNull(targetData)){return;}
	if(GRIT.valid.isNull(sourceData)){return;}

	var $object = $.extend({}, sourceData, targetData);
	return $object;
}

/**
 * 배열에서 특정값 뽑아내기
 */
GRIT.util.getKeyValues = function(jsonArray, name){
	if(GRIT.valid.isNull(jsonArray)){return}

	var result = new Array();
	$.each(jsonArray, function(key, jsonObj){
		result.push(jsonObj[name]);
	});
	return result;
}

/**
 * QueryString을 Json으로 변환
 */
GRIT.util.parseQuery = function(query){
   var Params = new Object ();
   if(!query) return Params; // return empty object
   var Pairs = query.split(/[;&]/);

   for ( var i = 0; i < Pairs.length; i++ ) {
      var KeyVal = Pairs[i].split('=');
      if (!KeyVal||KeyVal.length != 2 ) continue;
      var key = unescape( KeyVal[0] );
      var val = unescape( KeyVal[1] );
      val = val.replace(/\+/g,' ');
      Params[key] = val;
   }

   return Params;
}

/**
 * 콤보박스공통모듈 값전달 받아 설정
 * asEl         : (String) 셀렉터
 * asCd         : (String) 콤보박스의 name으로 설정, 입력된 JSON array의 값 중 key가 name인 값을 찾아 dataValue 값으로 처리
 * asCdText     : (String) 입력된 JSON array의 값 중 key가 text 인 값을 찾아 displayValue 값으로 처리
 * asDefaultVal : (String) 기본 선택 값, 없을 경우 첫행을 선택
 * aoArray      : (Array) Combo List에 표시할 JSON 데이터
 * asProcFg     : (String) 첫행에 표시할 값 ‘0’ : 추가 없음, ‘1’ : ‘전체’, ‘2’ : ‘선택’
 * ---------------------------------------------------------------------------------------
 * var arrList = [{cd:'cd1', name:'코드1'},{cd:'cd2', name:'코드2'}]
 * GRIT.util.initComboBox('#menu0301REG select','cd','name','',arrList,'2');
 */
GRIT.util.initComboBox = function(asEl, asCd, asCdText, asDefaultVal, aoArray, asProcFg){
	var $tgObj = $(asEl);
	$tgObj.empty();	//$tgObj.find('option').remove();

	if(asProcFg == '0'){
	} else if(asProcFg == '1'){ //전체
		$tgObj.append("<option value=''>전체</option>");
	} else if(asProcFg == '2'){ //선택
		$tgObj.append("<option value=''>선택</option>");
	}

	$.each(aoArray, function(i, item) {
		$tgObj.append("<option value='" + item[asCd] + "'>" + item[asCdText] +"</option>");
	});

	if(GRIT.valid.isNull(asDefaultVal)){
		$tgObj.find("option:eq(0)").prop("selected", true);
	} else {
		$tgObj.val(asDefaultVal).prop("selected", true);
	}
}

/**
 * GRIT.util.initComboBoxCmmTR('#menu0301REG select','NAE000'     ,'cd'  ,'cdNm'     ,'','1'); //공통코드-코드:NAE000
 * GRIT.util.initComboBoxCmmTR('#menu0301REG select','_AIRPORT_CD','baCd','airportNm','','1'); //공항콤보
 */
GRIT.util.initComboBoxCmmTR = function(asEl, asClsCd, asCd, asCdText, asDefaultVal, asProcFg){
	var $tgObj = $(asEl);
	$tgObj.empty();	//$tgObj.find('option').remove();

	if(asProcFg == '0'){
	} else if(asProcFg == '1'){ //전체
		$tgObj.append("<option value=''>전체</option>");
	} else if(asProcFg == '2'){ //선택
		$tgObj.append("<option value=''>선택</option>");
	}

	var param = {"clsCd" : asClsCd};

	$.ajax({
		 type 		 : "POST"
		,dataType    : "json"
		,contentType : "application/json; charset=utf-8"
		,data		 : JSON.stringify(param)
		,url         : "/common/commonCode/combobox"
		,async       : true		 //default
		,success: function (result, status, xhr) {
			var $select = $(asEl);
			$.each(result.rows, function(i, item) {
				$select.append("<option value='" + item[asCd] + "'>" + item[asCdText] +"</option>");
			});

			if(GRIT.valid.isNull(asDefaultVal)){
				$("option:eq(0)", $select).attr("selected","selected");
			} else {
				$("option[value='" + asDefaultVal + "']", $select).attr("selected","selected");
			}
		}
		,complete: function (xhr, status) {
		}
		,error: function (xhr, status, error) {
			GRIT.msg.alert(GRIT.msg.defaults.errMsg);
		}
	});
}


/**
 * GRIT.util.numberFormat		: 숫자에 천자리수마다 ',' 표시 추가
 * 	- param
 * 		val						: (Number) 변환할 숫자(단, 실수는 처리 불가)
 * 	- return					: (String) 변환한 문자열
 *
 * 예) GRIT.util.numberFormat(123456789);
 * 	=> 123,456,789
 */
GRIT.util.numberFormat = function(val, idx, digit) {
	var divValue, absVal, strVal, pos, strInt, strFloat, rtnStr, len, n, i;
    digit = digit || 0;
    divValue = Math.pow(10, digit);
    val = Math.round(val * divValue) / divValue;
    absVal = Math.abs(val);
    strVal = absVal.toString();
    pos = strVal.indexOf('.');
    strInt = pos >= 0 ? strVal.substr(0, pos) : strVal;

    if(absVal >= 1000) {
        len = strInt.length;
        n = len % 3 || 3;

        rtnStr = strInt.substr(0, n);

        for(i = n ; i < len ; i += 3) {
            rtnStr += ',' + strInt.substr(i, 3);
        }
    } else {
    	rtnStr = strInt;
    }

    if(val < 0) {
    	rtnStr = "-" + rtnStr;
    }

    if(pos >= 0) {
    	rtnStr += '.' + strVal.substr(pos + 1, 2);
    }

    return rtnStr;
}

/**
 * GRIT.util.isEmpty		: 빈값인지 여부
 * 	- param
 * 		obj				: (Object) 확인할 객체
 * 	- return			: (Boolean) true / false
 *
 * 예) GRIT.util.isEmpty(comp);
 */
GRIT.util.isEmpty = function(obj) {
	return obj == null || typeof obj === "undefined";
}
//********************************************************************************************
//Transaction 함수
//********************************************************************************************
GRIT.tran = new function(){};

GRIT.tran.sessionTimeOut = 60 * 60 * 1000;

GRIT.tran.sessionStartTime = GRIT.getCurTime();

GRIT.tran.trim = function(formObj){
	if(!GRIT.valid.isNull(formObj)){
		$(":text", formObj).each(function(index){
			$(this).val($.trim($(this).val()));
		})
	} else {
		$(":text").each(function(index){
			$(this).val($.trim($(this).val()));
		})
	}
}

/**
 * 서버전달 파라미터객체 생성하는 함수
 */
GRIT.tran.formToParam = function(formObj){
	GRIT.tran.trim(formObj);

	var paramObj = {};
	$($(formObj).serializeArray()).each(function(){paramObj[this.name] = this.value;});
	return paramObj;
}

GRIT.tran.jsonToUrlParam = function(aJson){
	var paramStr = Object.keys(aJson).map(function(k) {
	    return encodeURIComponent(k) + '=' + encodeURIComponent(aJson[k])
	}).join('&');
	return paramStr;
}

GRIT.tran.send = function(params) {
    if(!params.url) {
        GRIT.msg.alert("잘못된 접근입니다.");
    }

    var currentTime = GRIT.getCurTime();

    //console.log(currentTime - GRIT.tran.sessionStartTime);
    if(currentTime - GRIT.tran.sessionStartTime > GRIT.tran.sessionTimeOut) {
		GRIT.msg.alert("세션이 종료되어 로그인화면으로 이동합니다.", function() {
			window.location = '/common/login';
		});

        return false;
    }

    var type = params.type || 'POST';
    var url = params.url;
    var dataType = params.dataType || "json";
    var sendData = params.sendData || {};
    var sendType = params.sendType || "string";
    var loading = params.hasOwnProperty('loading') ? params.loading : true;
    var loadingTarget = $('div.tabtopmenu.boxcontent.' + params.loadingTarget)[0];
    var contentType = params.contentType || "application/json; charset=utf-8";
    var success = (typeof params.success == 'function') ? params.success : null;
    var error = (typeof params.error == 'function') ? params.error : null;
    var done = (typeof params.done == 'function') ? params.done : null;
    var async = params.hasOwnProperty('async') ? params.async : true;

    var data = sendType == "string" ? JSON.stringify(sendData) : sendData;

    if(loading) {
        GRIT.window.showLoadingBar(loadingTarget);
    }

    var ajaxOption = {
        type: type,
    	url: url,
    	async: async,
    	cache: false,
    	dataType: dataType,
    	timeout:1000000000,
    	data: data,
    	contentType: contentType,
    	success : function() {
    		if(arguments[0]["authError"] == "Y") {
    			var authList = new Array("조회", "신규", "저장", "삭제", "엑셀다운로드");
    			GRIT.msg.alert(authList[arguments[0]["authCode"]] + " 권한이 없습니다.");
    		} else {
        	    if(success) {
        	        success.apply(success, arguments);
        	    }
    		}
    	    if(loading) {
                GRIT.window.hideLoadingBar(loadingTarget);
            }
    	},
    	error: function(request,status,error){
    		if(loading) {
                GRIT.window.hideLoadingBar(loadingTarget);
            }
			//GRIT.msg.alert("• 에러가 발생하였습니다.계속 에러가 발생하면 관리자에게 문의하세요.");
    		mFnc.layerError();
		}
		/*
    	error: function() {
    	    if(error) {
    	    	error.apply(error, arguments);
    	    }
    	    if(loading) {
                GRIT.window.hideLoadingBar(loadingTarget);
            }
    	}
    	*/
    };

    $.ajax(ajaxOption)
    .done(function() {
	    if(done) {
	        done.apply(done, arguments);
	    }

	    GRIT.tran.sessionStartTime = GRIT.getCurTime();
    });
}

//********************************************************************************************
//메시지 함수
//********************************************************************************************
GRIT.msg = new function(){};
GRIT.msg.defaults ={
	  width     : 400
	, height    : 300
	, argument  : undefined
	, modal     : true
	, resizable : false
	, errMsg	: "에러가 발생하였습니다."
}

GRIT.msg.escapeXml = function(unsafe) {
    return unsafe.replace(/[<>&'"]/g, function (c){
        switch (c) {
            case '<': return '&lt;';
            case '>': return '&gt;';
            case '&': return '&amp;';
            case '\'': return '&apos;';
            case '"': return '&quot;';
        }
    });
}

/**
 * 알림메시지
 * GRIT.msg.alert('메시지 출력');
 * GRIT.msg.alert('메시지 출력',GRIT.popup.fnTest,{width:600,height:700});
 * option :
 * width  : 가로
 * height : 세로
 */
GRIT.msg.alert = function(asText, callback, options){
	options = jQuery.extend({}, GRIT.msg.defaults, options);
	options.title == undefined ? options.title = "" : options.title

	var pageId = "pop" + GRIT.date.getDateTime("");
	//pageId = "pageId";

    var pagetitle = options.title
   	var param     = "";

    if(typeof $("#" + pageId).dialog('isOpen') !== 'object' || $("#" + pageId).dialog('isOpen') == false){
    	$("#" + pageId).dialog('open');
    	return;
    }

    var msgBox = new Array();
    msgBox.push('<div id="popup_container">');
    msgBox.push('	<h1>알림</h1>');
    msgBox.push('	<div class="popup_content">');
    msgBox.push('		<div class="err_box">');
    msgBox.push('			<p class="txt_err"><em class="img_alert"></em><span>' + GRIT.msg.escapeXml(asText) + '</span></p>');
    msgBox.push('		</div>');
    msgBox.push('	</div>');
    msgBox.push('</div>');

    $dialog = $('<div id="' + pageId + ' class="popup_wrap"></div>')
        .html(msgBox.join(''))
        .dialog({
             autoOpen : false
            ,modal    : options.modal
            ,width    : options.width
            ,height   : options.height
            ,resizable: false
            ,title    : pagetitle
            ,buttons  : {
		       	"확인" : function() {
		       		if (typeof callback == 'function') {
		       			callback();
		       		}
		       		$(this).dialog("close").dialog('destroy');
		       	}
		     }
	        ,create : function(event, ui){
	    		var close = $(".ui-dialog-titlebar-close")

	    	    close.click( function(){
	    	    	$('#'+pageId).dialog("close").dialog('destroy');
	    	    })
	    	}

     });
    $dialog.dialog({draggable: false}).parent().draggable();
    $dialog.dialog('open').parents(".ui-dialog").find(".ui-dialog-titlebar").remove();
}



GRIT.msg.alert2 = function(asText, asText2, callback, options){
	options = jQuery.extend({}, GRIT.msg.defaults, options);
	options.title == undefined ? options.title = "" : options.title

	var pageId = "pop" + GRIT.date.getDateTime("");
	//pageId = "pageId";

    var pagetitle = options.title
   	var param     = "";

    if(typeof $("#" + pageId).dialog('isOpen') !== 'object' || $("#" + pageId).dialog('isOpen') == false){
    	$("#" + pageId).dialog('open');
    	return;
    }

    var msgBox = new Array();
    msgBox.push('<div id="popup_container">');
    msgBox.push('	<h1>알림</h1>');
    msgBox.push('	<div class="popup_content">');
    msgBox.push('		<div class="err_box">');
    msgBox.push('			<p class="txt_err"><em class="img_alert"></em><span>' + GRIT.msg.escapeXml(asText) + '</span></p>');
    msgBox.push('			<p class="txt_err"><span>' + GRIT.msg.escapeXml(asText2) + '</span></p>');
    msgBox.push('		</div>');
    msgBox.push('	</div>');
    msgBox.push('</div>');

    $dialog = $('<div id="' + pageId + ' class="popup_wrap"></div>')
        .html(msgBox.join(''))
        .dialog({
             autoOpen : false
            ,modal    : options.modal
            ,width    : options.width
            ,height   : options.height
            ,resizable: false
            ,title    : pagetitle
            ,buttons  : {
		       	"확인" : function() {
		       		if (typeof callback == 'function') {
		       			callback();
		       		}
		       		$(this).dialog("close").dialog('destroy');
		       	}
		     }
	        ,create : function(event, ui){
	    		var close = $(".ui-dialog-titlebar-close")

	    	    close.click( function(){
	    	    	$('#'+pageId).dialog("close").dialog('destroy');
	    	    })
	    	}

     });
    $dialog.dialog({draggable: false}).parent().draggable();
    $dialog.dialog('open').parents(".ui-dialog").find(".ui-dialog-titlebar").remove();
}


/**
 * 알림메시지
 * GRIT.msg.alert('메시지 출력');
 * GRIT.msg.alert('메시지 출력',GRIT.popup.fnTest,{width:600,height:700});
 * option :
 * width  : 가로
 * height : 세로
 */
GRIT.msg.alert3 = function(asText, callback, options){
	options = jQuery.extend({}, GRIT.msg.defaults, options);
	options.title == undefined ? options.title = "" : options.title

	var pageId = "pop" + GRIT.date.getDateTime("");
	//pageId = "pageId";

    var pagetitle = options.title
   	var param     = "";

    if(typeof $("#" + pageId).dialog('isOpen') !== 'object' || $("#" + pageId).dialog('isOpen') == false){
    	$("#" + pageId).dialog('open');
    	return;
    }

    var msgBox = new Array();
    msgBox.push('<div id="popup_container">');
    msgBox.push('	<h1>알림</h1>');
    msgBox.push('	<div class="popup_content">');
    msgBox.push('		<div class="err_box">');
    msgBox.push('			<p class="txt_err"><em class="img_alert"></em><span>' + GRIT.msg.escapeXml(asText) + '</span></p>');
    msgBox.push('		</div>');
    msgBox.push('	</div>');
    msgBox.push('</div>');

    $dialog = $('<div id="' + pageId + ' class="popup_wrap"></div>')
        .html(msgBox.join(''))
        .dialog({
             autoOpen : false
            ,modal    : options.modal
            ,width    : options.width
            ,height   : options.height
            ,resizable: false
            ,title    : pagetitle
            ,buttons  : {
		       	"확인" : function() {
		       		if (typeof callback == 'function') {
		       			callback();
		       		}
		       		$(this).dialog("close").dialog('destroy');
		       	}
		     }
	        ,create : function(event, ui){
	    		var close = $(".ui-dialog-titlebar-close")

	    	    close.click( function(){
	    	    	$('#'+pageId).dialog("close").dialog('destroy');
	    	    })
	    	}

     });
    $dialog.dialog({draggable: true}).parent().draggable();
    $dialog.dialog('open').parents(".ui-dialog").find(".ui-dialog-titlebar").remove();
}

/**
 * 확인메시지
 * GRIT.msg.confirm('XXX 하시겠습니까?');
 * GRIT.msg.confirm('XXX 하시겠습니까?',GRIT.popup.fnTest,{width:600,height:700});
 * option :
 * width  : 가로
 * height : 세로
 */
GRIT.msg.confirm = function(asText, callback, options){
	options = jQuery.extend({}, GRIT.msg.defaults, options);
	options.title == undefined ? options.title = "" : options.title

	var pageId = "pop" + GRIT.date.getDateTime("");
	//pageId = "pageId";

    var pagetitle = options.title
   	var param     = "";

    if(typeof $("#" + pageId).dialog('isOpen') !== 'object' || $("#" + pageId).dialog('isOpen') == false){
    	$("#" + pageId).dialog('open');
    	return;
    }

    var msgBox = new Array();
    msgBox.push('<div id="popup_container">');
    msgBox.push('	<h1>확인</h1>');
    msgBox.push('	<div class="popup_content">');
    msgBox.push('		<div class="err_box">');
    msgBox.push('			<p class="txt_err"><em class="img_alert"></em><span>' + GRIT.msg.escapeXml(asText) + '</span></p>');
    msgBox.push('		</div>');
    msgBox.push('	</div>');
    msgBox.push('</div>');

    $dialog = $('<div id="' + pageId + ' class="popup_wrap"></div>')
        .html(msgBox.join(''))
        .dialog({
             autoOpen : false
            ,modal    : options.modal
            ,width    : options.width
            ,height   : options.height
            ,resizable: false
            ,title    : pagetitle
            ,buttons  : {
		       	"예" : function() {
		       		if (typeof callback == 'function') {
		       			callback(true);
		       		}
        		    $(this).dialog("close").dialog('destroy');
		       	}
        	   ,"아니오" : function() {
        		    if (typeof callback == 'function') {
        			   callback(false);
        		    }
        		    $(this).dialog("close").dialog('destroy');
        	   	}
		     }
	        ,create : function(event, ui){
	    		var close = $(".ui-dialog-titlebar-close")

	    	    close.click( function(){
	    	    	$('#'+pageId).dialog("close").dialog('destroy');
	    	    })
	    	}

     });
    $dialog.dialog({draggable: false}).parent().draggable();
    $dialog.dialog('open').parents(".ui-dialog").find(".ui-dialog-titlebar").remove();
}


//********************************************************************************************
//공통 팝업
//********************************************************************************************
GRIT.popup = new function(){};
GRIT.popup.defaults ={
	  width     : 400
	, height    : 300
	, argument  : undefined
	, modal     : true
	, multi     : false
	, resizable : false
	, button1   : "확인"
	, button2   : "닫기"
	, button3   : "기타"
	, emptyText : "조회된 데이터가 존재하지 않습니다."
	, fnResult  : "fnReturn"
	, fnResult2 : "fnReturn2"
}

/**
 * 레이어 팝업 - 리턴할 함수는 fnReturn()으로(고정) 컨텐츠에서 구현해주세요
 * GRIT.popup.layer("내용입니다", null, {title:"제목"});
 *
 * var aHtml = "내용입니다<script>function fnReturn(){return 'bbb'}</script>";
 * GRIT.popup.layer(aHtml, null, {title:"제목"});
 * GRIT.popup.layer(aHtml, GRIT.popup.fnTest , {title:"제목"});
 * GRIT.popup.layer(aHtml, GRIT.popup.fnTest , {title:"제목",button1:null, button2:null});
 */
GRIT.popup.layer = function(aHtml, callback, options){
	options = jQuery.extend({}, GRIT.popup.defaults, options);
	options.title == undefined ? options.title = "" : options.title

	var pageId = "pop" + GRIT.date.getDateTime("");

    var pagetitle = options.title
   	var param     = "";

    if(typeof $("#" + pageId).dialog('isOpen') !== 'object' || $("#" + pageId).dialog('isOpen') == false){
    	$("#" + pageId).dialog('open');
    	return;
    }

    var btns = {};
    if(!GRIT.valid.isNull(options.button1)){
        btns[options.button1] = function(){
       		if (typeof callback == 'function') {
       			callback(fnReturn);
       		}
       		$(this).dialog("close").dialog('destroy');
        };
    }
    if(!GRIT.valid.isNull(options.button2)){
	    btns[options.button2] = function(){
	    	$(this).dialog("close").dialog('destroy');
	    };
    }

    var $dialog = $('<div id="' + pageId + '" class="popup_wrap"></div>')
        .html(aHtml)
        .dialog({
             autoOpen : false
            ,modal    : options.modal
            ,width    : options.width
            ,height   : options.height
            ,resizable: false
            ,title    : pagetitle
            ,buttons  : btns
            ,closeOnEscape: false
     });

    //$dialog.dialog({draggable: false}).parent().draggable();
    //$dialog.dialog();
    $dialog.dialog({
        open: function(event, ui) {
            var el = $(this).closest('.ui-dialog').find('.ui-dialog-titlebar-close');
            el.off();
            el.on("click", function(){$dialog.dialog("close").dialog('destroy');});
        }
    });
    $dialog.dialog('open');
    //$dialog.$(this).parent().parent().find('.ui-dialog-content.ui-widget-content').dialog("close").dialog('destory');
}


/**
 * 레이어 팝업 - 리턴할 함수는 fnReturn()으로(고정) 컨텐츠에서 구현해주세요
 * GRIT.popup.layer("내용입니다", null, {title:"제목"});
 *
 * var aHtml = "내용입니다<script>function fnReturn(){return 'bbb'}</script>";
 * GRIT.popup.layer(aHtml, null, {title:"제목"});
 * GRIT.popup.layer(aHtml, GRIT.popup.fnTest , {title:"제목"});
 * GRIT.popup.layer(aHtml, GRIT.popup.fnTest , {title:"제목",button1:null, button2:null});
 */
GRIT.popup.layer2 = function(pageId, aHtml, callback, options){
	options = jQuery.extend({}, GRIT.popup.defaults, options);
	options.title == undefined ? options.title = "" : options.title

    var pagetitle = options.title
   	var param     = "";

    if(typeof $("#" + pageId).dialog('isOpen') !== 'object' || $("#" + pageId).dialog('isOpen') == false){
    	$("#" + pageId).dialog('open');
    	return;
    }

    var btns = {};
    if(!GRIT.valid.isNull(options.button1)){
        btns[options.button1] = function(){
       		if (typeof callback == 'function') {
       			callback(eval(options.fnResult));	//호출한 팝업에서 리턴할 함수(팝업에서 해당 함수를 호출하여  callback으로 넘긴다
       		}
       		$(this).dialog("close").dialog('destroy');
        };
    }
    if(!GRIT.valid.isNull(options.button3)){
        btns[options.button3] = function(){
       		if (typeof callback == 'function') {
       			callback(fnReturn2);
       		}
       		$(this).dialog("close").dialog('destroy');
        };
    }
    if(!GRIT.valid.isNull(options.button2)){
	    btns[options.button2] = function(){
	    	$(this).dialog("close").dialog('destroy');
	    };
    }

    var $dialog = $('<div id="' + pageId + '" class="popup_wrap"></div>')
        .html(aHtml)
        .dialog({
             autoOpen : false
            ,modal    : options.modal
            ,width    : options.width
            ,height   : options.height
            ,resizable: false
            ,title    : pagetitle
            ,buttons  : btns
            ,closeOnEscape: false
     });

    //$dialog.dialog({draggable: false}).parent().draggable();
    //$dialog.dialog();
    $dialog.dialog({
        open: function(event, ui) {
            var el = $(this).closest('.ui-dialog').find('.ui-dialog-titlebar-close');
            el.off();
            el.on("click", function(){$dialog.dialog("close").dialog('destroy');});
        }
    });
    $dialog.dialog('open');
    //$dialog.$(this).parent().parent().find('.ui-dialog-content.ui-widget-content').dialog("close").dialog('destory');
}

//공통팝업 함수 TEST
GRIT.popup.fnTest = function(ao){
	GRIT.debug("GRIT.popup.fnTest start");
	GRIT.debug(ao);
	GRIT.debug("GRIT.popup.fnTest end");
}

/**
 * 단일선택공통모듈(팝업)
 * var arrList = [{cd:'00000025741-01-1', name:'김포공항/(주)롯데리아'},{cd:'00000025741-01-2', name:'김포공항/(주)롯데리아'}]
 * GRIT.popup.singleSelectBox('cd','name','',arrList);
 * GRIT.popup.singleSelectBox('cd','name','',arrList,null,{width:500,height:300});
 * GRIT.popup.singleSelectBox('cd','name','',arrList,GRIT.popup.fnTest,{width:500,height:300});
 * option :
 * width  : 가로
 * height : 세로
 */
GRIT.popup.singleSelectBox = function(asCd, asCdText, asDefaultVal, aoArray, callback, options){
	options = jQuery.extend({}, GRIT.popup.defaults, options);
	options.title == undefined ? options.title = "선택" : options.title;

	var pageId = "pop" + GRIT.date.getDateTime("");
	//pageId = "pageId";

    var pagetitle = options.title;
   	var param     = "";

    if(typeof $("#" + pageId).dialog('isOpen') !== 'object' || $("#" + pageId).dialog('isOpen') == false){
    	$("#" + pageId).dialog('open');
    	return;
    }

    var selectBox = new Array();
    if(GRIT.valid.isNull(aoArray) || aoArray.length == 0){
        selectBox.push('<h><b>' + options.emptyText + '</b></h>');
    } else {
        selectBox.push('<select multiple="multiple" style="width:100%;height:100%">');

        GRIT.commonPopupList = aoArray;

        $.each(aoArray, function(i, item) {
    		selectBox.push("<option value='" + item[asCd] + "'data_text='" + item[asCdText] + "' data_index='" + i + "' >");
    		selectBox.push("[" + item[asCd] + "] " + item[asCdText]);
    		selectBox.push("</option>");
    	});
        selectBox.push('</select>');
    }

    if(!options.popInto){
	    //$dialog = $('<div id="' + pageId + '" style="background-color:gold;">')
    	$dialog = $('<div id="' + pageId + '">')
	        .html(selectBox.join(''))
	        .dialog({
	             autoOpen : false
	        	,position:{ my:"center", at:"center", of:"#wrap" }
	            ,modal    : options.modal
	            ,width    : options.width
	            ,height   : options.height
	            ,resizable: options.resizable
	            ,title    : pagetitle
	            ,buttons  : {
			       	"확인" : function(){
			       		var code = $('#' + pageId + " > select > option:selected").val();
			       		var text = $('#' + pageId + " > select > option:selected").attr('data_text');
			       		var idx = $('#' + pageId + " > select > option:selected").attr('data_index');

			       		if (typeof callback == 'function') {
			       			/*
				       		var result = '{"' + asCd + '":"' + code + '","' + asCdText + '":"' + text + '"}';
			       			callback(JSON.parse(result));
			       			*/
				       		callback(GRIT.commonPopupList[idx]);
			       		} else if(typeof callback == 'string'){
			       			$(callback).val(code);
			       		}
		       			$(this).dialog("close").dialog('destroy');
			       	},
			       	"닫기": function(){
						$(this).dialog("close").dialog('destroy');
			       }
			     }
		        ,create : function(event, ui){
		    		var close = $(".ui-dialog-titlebar-close")

		    	    close.click( function(){
		    	    	$('#'+pageId).dialog("close").dialog('destroy');
		    	    })
		    	}
	     });
    }

    if(GRIT.valid.isNull(asDefaultVal)){
    	$('#' + pageId + " > select").find("option:eq(0)").prop("selected", true);
    } else {
    	$('#' + pageId + " > select").val(asDefaultVal).prop("selected", true);
    }

    //$dialog.dialog('open').parents(".ui-dialog").find(".ui-dialog-titlebar").remove();
    $dialog.dialog('open');
}

/**
 * 단일선택공통모듈(팝업)
 * 공항정보 : _AIRPORT_CD
 * 공통코드 :
 * GRIT.popup.singleSelectBoxTR('_AIRPORT_CD','baCd','airportNm','',GRIT.popup.fnTest,{width:500,height:300});
 * GRIT.popup.singleSelectBoxTR('NAE000'     ,'cd','cdNm','',GRIT.popup.fnTest,{width:500,height:300});
 * option :
 * width  : 가로
 * height : 세로
 */
/*
GRIT.popup.singleSelectBoxTR = function(asClsCd, asCd, asCdText, asDefaultVal, callback, options){
	options = jQuery.extend({}, GRIT.popup.defaults, options);
	options.title == undefined ? options.title = "선택" : options.title;

	var pageId = "pop" + GRIT.date.getDateTime("");
	//pageId = "pageId";

    var pagetitle = options.title;
   	var param     = "";

    if(typeof $("#" + pageId).dialog('isOpen') !== 'object' || $("#" + pageId).dialog('isOpen') == false){
    	$("#" + pageId).dialog('open');
    	return;
    }

	var param = {"clsCd" : asClsCd};
	$dialog = $('<div id="' + pageId + '">');

	$.ajax({
		 type 		 : "POST"
		,dataType    : "json"
		,contentType : "application/json; charset=utf-8"
		,data		 : JSON.stringify(param)
		,url         : "/common/commonCode/combobox"
		,async       : true		 //default
		,success: function (result, status, xhr) {

			var selectBox = new Array();
			if(result.rows.length < 1){
				selectBox.push('<h><b>' + options.emptyText + '</b></h>');
			} else {
		        selectBox.push('<select size="30" style="width:100%;height:100%">');

		        GRIT.commonPopupList = result.rows;

		        $.each(result.rows, function(i, item) {
		    		selectBox.push("<option value='" + item[asCd] + "' data_text='" + item[asCdText] + "' data_index='" + i + "' >");
		    		selectBox.push("[" + item[asCd] + "] " + item[asCdText]);
		    		selectBox.push("</option>");
		    	});
		        selectBox.push('</select>');
			}

			$dialog.html(selectBox.join(''))
		        .dialog({
		             autoOpen : false
		        	,position:{ my:"center", at:"center", of:"#wrap" }
		            ,modal    : options.modal
		            ,width    : options.width
		            ,height   : options.height
		            ,resizable: options.resizable
		            ,title    : pagetitle
		            ,buttons  : {
				       	"확인" : function(){
				       		var code = $('#' + pageId + " > select > option:selected").val();
				       		var text = $('#' + pageId + " > select > option:selected").attr('data_text');
				       		var idx = $('#' + pageId + " > select > option:selected").attr('data_index');

				       		if (typeof callback == 'function') {

					       		//var result = '{"' + asCd + '":"' + code + '","' + asCdText + '":"' + text + '"}';

				       			//callback(JSON.parse(result));
					       		callback(GRIT.commonPopupList[idx]);
				       		} else if(typeof callback == 'string'){
				       			$(callback).val(code);
				       		}
			       			$(this).dialog("close").dialog('destroy');
				       	},
				       	"닫기": function(){
							$(this).dialog("close").dialog('destroy');
				       }
				     }
			        ,create : function(event, ui){
			    		var close = $(".ui-dialog-titlebar-close")

			    	    close.click( function(){
			    	    	$('#'+pageId).dialog("close").dialog('destroy');
			    	    })
			    	}
		    });
		 }
		,complete: function (xhr, status) {
		    $dialog.dialog('open');

		    if(GRIT.valid.isNull(asDefaultVal)){
		    	$('#' + pageId + " > select").find("option:eq(0)").prop("selected", true);
		    } else {
		    	$('#' + pageId + " > select").val(asDefaultVal).prop("selected", true);
		    }
		}
		,error: function (xhr, status, error) {
			GRIT.msg.alert(GRIT.msg.defaults.errMsg);
		}
	});
    //$dialog.dialog('open').parents(".ui-dialog").find(".ui-dialog-titlebar").remove();
}
*/

/**
 * 다중선택공통모듈(팝업)
   var arrList = [
   	 {cd:'BA15', name:'김포공항'}
   	,{cd:'BA16', name:'김포공항/(주)롯데리아'}
   	,{cd:'BA17', name:'김포공항'}
   	,{cd:'BA18', name:'김포공항/(주)롯데리아'}
   	,{cd:'BA19', name:'김포공항'}
   	,{cd:'BA20', name:'김포공항/(주)롯데리아'}
   	,{cd:'BA21', name:'김포공항'}
   ]
 * GRIT.popup.multiSelectBox('cd','name','',arrList);
 * GRIT.popup.multiSelectBox('cd','name','',arrList,null,{width:500,height:300});
 * GRIT.popup.multiSelectBox('cd','name','BA16,BA20',arrList,GRIT.popup.fnTest,{width:500,height:300});
 * asPopupId    : 팝업ID
 * asCd         : 코드
 * asCdText     : 텍스트
 * aoDefaultArray : 기본값-배열(여러건이므로)
 * aoArray      : 데이터
 * callback		: 받을 함수
 * option :
 * width  : 가로
 * height : 세로
 */
GRIT.popup.multiSelectBox = function(asCd, asCdText, asDefaultArray, aoArray, callback, options){
	options = jQuery.extend({}, GRIT.popup.defaults, options);
	options.title == undefined ? options.title = "선택" : options.title

	var pageId = "pop" + GRIT.date.getDateTime("");
	//pageId = "pageId";

    var pagetitle = options.title
   	var param     = "";

    if(typeof $("#" + pageId).dialog('isOpen') !== 'object' || $("#" + pageId).dialog('isOpen') == false){
    	$("#" + pageId).dialog('open');
    	return;
    }

    var selectBox = new Array();
    if(GRIT.valid.isNull(aoArray) || aoArray.length == 0){
        selectBox.push('<h><b>' + options.emptyText + '</b></h>');
    } else {

    	selectBox.push('<input id="#btn" type="checkbox">전체선택</input>');
        selectBox.push('<div id="list" style="overflow-x: hidden; background-color:White; width:100%; height:' + (options.height - 129) + 'px">');
        selectBox.push('<ul>');

        GRIT.commonPopupList = aoArray;

        $.each(aoArray, function(i, item) {
    		selectBox.push("<li>");
    		selectBox.push("<input type='checkbox' value='" + item[asCd] + "' data_text='" + item[asCdText] + "' data_index='" + i + "' >");
    		selectBox.push("[" + item[asCd] + "] " + item[asCdText]);
    		selectBox.push("</li>");
    	});
        selectBox.push('</ul>');
        selectBox.push('</div>');
    }

    if(!options.popInto){
	    //$dialog = $('<div id="' + pageId + '" style="background-color:gold;">')
    	$dialog = $('<div id="' + pageId + '">')
	        .html(selectBox.join(''))
	        .dialog({
	             autoOpen : false
	            ,position :[options.top,options.left] //x,y  값을 지정
	        	,position:{ my:"center", at:"center", of:"#wrap" }
	            ,modal    : options.modal
	            ,width    : options.width
	            ,height   : options.height
	            ,resizable: options.resizable
	            ,title    : pagetitle
	            ,buttons  : {
			       	"확인" : function(){
			       		var result = $.map($('#' + pageId + ' input:checkbox').not('input:eq(0)'),function(el) {
			       			if($(el).is(":checked")){
			       				/*
			       				var jsonStr = '{"' + asCd + '":"' + $(el).val() + '","'
			       							+ asCdText + '":"' + $(el).attr('data_text') + '"}' ;
		       					return JSON.parse(jsonStr);
		       					*/
			       				return GRIT.commonPopupList[$(el).attr('data_index')];
			       			};
			       		});

			       		if (typeof callback == 'function') {
			       			callback(result);
			       		} else if(typeof callback == 'string'){
			       			$(callback).val(result.join(","));
			       		}
		       			$(this).dialog("close").dialog('destroy');
			       	},
			       	"닫기": function(){
						$(this).dialog("close").dialog('destroy');
			       }
			     }
		        ,create : function(event, ui){
		    		var close = $(".ui-dialog-titlebar-close")

		    	    close.click( function(){
		    	    	$('#'+pageId).dialog("close").dialog('destroy');
		    	    })
		    	}
	     });
    }

    //기본값 처리
    if(!GRIT.valid.isNull(asDefaultArray)){
    	var arrDefault = asDefaultArray.split(",");
    	$('#' + pageId + ' input:checkbox').not('input:eq(0)').each(function(idx) {
    		for(var i=0;i<arrDefault.length;i++){
    			if($(this).val() == GRIT.string.trim(arrDefault[i])){
    				$(this).prop("checked", true);
    			}
    		}
    	});
    }

    //전체선택 이벤트 처리
    $('#' + pageId + " > input").change(function(){
    	if($(this).is(":checked")){
            $(this).next().find('input').prop("checked", true);
        }else{
            $(this).next().find('input').prop("checked", false);
        }
    });

    $dialog.dialog('open');
}


/**
 * 다중선택공통모듈(팝업)TR
 * GRIT.popup.multiSelectBoxTR('NAE000','cd','cdNm','');
 * GRIT.popup.multiSelectBoxTR('_AIRPORT_CD','baCd','airportNm','');
 * GRIT.popup.multiSelectBoxTR('NAE000','cd','cdNm','',null,{width:500,height:300});
 * GRIT.popup.multiSelectBoxTR('NAE000','cd','cdNm','PA,CF,KN',GRIT.popup.fnTest,{width:500,height:300});

 * asCd         : 코드
 * asCdText     : 텍스트
 * aoDefaultArray : 기본값-배열(여러건이므로)
 * callback		: 받을 함수
 * option :
 * width  : 가로
 * height : 세로
 */

/*
GRIT.popup.multiSelectBoxTR = function(asClsCd, asCd, asCdText, asDefaultArray, callback, options){
	options = jQuery.extend({}, GRIT.popup.defaults, options);
	options.title == undefined ? options.title = "선택" : options.title

	var pageId = "pop" + GRIT.date.getDateTime("");
	//pageId = "pageId";

    var pagetitle = options.title
   	var param     = "";

    if(typeof $("#" + pageId).dialog('isOpen') !== 'object' || $("#" + pageId).dialog('isOpen') == false){
    	$("#" + pageId).dialog('open');
    	return;
    }

	var param = {"clsCd" : asClsCd};
	$dialog = $('<div id="' + pageId + '">');

	$.ajax({
		 type 		 : "POST"
		,dataType    : "json"
		,contentType : "application/json; charset=utf-8"
		,data		 : JSON.stringify(param)
		,url         : "/common/commonCode/combobox"
		,async       : true		 //default
		,success: function (result, status, xhr) {

			var selectBox = new Array();
			if(result.rows.length < 1){
				selectBox.push('<h><b>' + options.emptyText + '</b></h>');
			} else {
				selectBox.push('<input id="#btn" type="checkbox">전체선택</input>');
		        selectBox.push('<div id="list" style="overflow-x: hidden; background-color:White; width:100%; height:' + (options.height - 129) + 'px">');
		        selectBox.push('<ul>');

		        GRIT.commonPopupList = result.rows;

		        $.each(result.rows, function(i, item) {
		    		selectBox.push("<li>");
		    		selectBox.push("<input type='checkbox' value='" + item[asCd] + "' data_text='" + item[asCdText] + "' data_index='" + i + "' >");
		    		selectBox.push("[" + item[asCd] + "] " + item[asCdText]);
		    		selectBox.push("</li>");
		    	});
		        selectBox.push('</ul>');
		        selectBox.push('</div>');
			}

			$dialog.html(selectBox.join(''))
		        .dialog({
		             autoOpen : false
		        	,position:{ my:"center", at:"center", of:"#wrap" }
		            ,modal    : options.modal
		            ,width    : options.width
		            ,height   : options.height
		            ,resizable: options.resizable
		            ,title    : pagetitle
		            ,buttons  : {
				       	"확인" : function(){
				       		var result = $.map($('#' + pageId + ' input:checkbox').not('input:eq(0)'),function(el) {
				       			if($(el).is(":checked")){

				       				//var jsonStr = '{"' + asCd + '":"' + $(el).val() + '","'
				       							//+ asCdText + '":"' + $(el).attr('data_text') + '"}' ;
			       					//return JSON.parse(jsonStr);

				       				return GRIT.commonPopupList[$(el).attr('data_index')];
				       			};
				       		});

				       		if (typeof callback == 'function') {
				       			callback(result);
				       		} else if(typeof callback == 'string'){
				       			$(callback).val(result.join(","));
				       		}
			       			$(this).dialog("close").dialog('destroy');
				       	},
				       	"닫기": function(){
							$(this).dialog("close").dialog('destroy');
				       }
				     }
			        ,create : function(event, ui){
			    		var close = $(".ui-dialog-titlebar-close")

			    	    close.click( function(){
			    	    	$('#'+pageId).dialog("close").dialog('destroy');
			    	    })
			    	}
		    });
		 }
		,complete: function (xhr, status) {
			//기본값 처리
		    if(!GRIT.valid.isNull(asDefaultArray)){
		    	var arrDefault = asDefaultArray.split(",");
		    	$('#' + pageId + ' input:checkbox').not('input:eq(0)').each(function(idx) {
		    		for(var i=0;i<arrDefault.length;i++){
		    			if($(this).val() == GRIT.string.trim(arrDefault[i])){
		    				$(this).prop("checked", true);
		    			}
		    		}
		    	});
		    }

		    //전체선택 이벤트 처리
		    $('#' + pageId + " > input").change(function(){
		    	if($(this).is(":checked")){
		            $(this).next().find('input').prop("checked", true);
		        }else{
		            $(this).next().find('input').prop("checked", false);
		        }
		    });

		    $dialog.dialog('open');
		}
		,error: function (xhr, status, error) {
			GRIT.msg.alert(GRIT.msg.defaults.errMsg);
		}
	});
}
*/



GRIT.popup.multiSelectBoxTR = function(asClsCd, asCd, asCdText, asDefaultArray, callback, options, params){

	options = jQuery.extend({}, GRIT.popup.defaults, options);
	options.title == undefined ? options.title = "선택" : options.title;

	var pageId = "pop" + GRIT.date.getDateTime("");
    var pagetitle = options.title;
    var asHeight = (options.height == undefined ? 170 : options.height - 106);
    var required = (options.required == undefined ? false : options.required);

    if(typeof $("#" + pageId).dialog('isOpen') !== 'object' || $("#" + pageId).dialog('isOpen') == false){
    	$("#" + pageId).dialog('open');
    	return;
    }

    $dialog = $('<div id="' + pageId + '">');

	var param = {
			"clsCd" : asClsCd,
			"asCd": asCd,
			"asCdText": asCdText,
			"asDefaultArray": asDefaultArray,
			"asHeight": asHeight
	};

	if(params){
		param = GRIT.util.appendData(params, param);
	}

	$.ajax({
		type: "POST",
		url: "/common/commonMultiPop",
		async: false,
		cache: false,
		data: JSON.stringify(param),
		contentType: "application/json; charset=utf-8",
		datatype: "html",
		success: function(data) {
			$dialog = $('<div id="' + pageId + '" class="popup_wrap"></div>').html(data);
			$dialog.dialog({
						autoOpen  : false
			        	,position : {my:"center", at:"center", of:"#wrap"}
			            ,modal    : options.modal
			            ,width    : options.width
			            ,height   : options.height + 10
			            ,resizable: options.resizable
			            ,title    : pagetitle
			            ,closeOnEscape: false
			            ,buttons  : {
					       	"확인" : function(){
					       		var result = [];
					       		var selectorColumn = CommonMultiPopFc.gridRoot.getObjectById("selector");
					       		var selectedIndices = selectorColumn.getSelectedIndices();
					       		if(required && selectedIndices.length == 0){
					       			GRIT.msg.alert("코드값을 선택하여 주세요.");
					       			return;
					       		}
					       		for(var i=0; i < selectedIndices.length; i++){
					       			result.push(CommonMultiPopFc.gridRoot.getItemAt(selectedIndices[i]));
					       		}
					       		if(typeof callback == 'function'){
					       			callback(result);
					       		}else if(typeof callback == 'string'){
					       			$(callback).val(result.join(","));
					       		}
				       			$(this).dialog("close").dialog('destroy');
					       	},
					       	"닫기": function(){
								$(this).dialog("close").dialog('destroy');
					       }
					     }
				        ,create : function(event, ui){
				    		var close = $(".ui-dialog-titlebar-close");
				    	    close.click(function(){
				    	    	$('#'+pageId).dialog("close").dialog('destroy');
				    	    });
				    	}
			});
		},
		complete: function (xhr, status) {
		    $dialog.dialog('open');
		},
		error: function(request, status, error) {
			//GRIT.msg.alert(request.statusText + ":" + request.responseText);
			GRIT.msg.alert("세션이 종료되어 로그인화면으로 이동합니다.", function(){
				window.location = '/common/login';
			});
			return;
		}
	}).done(function(data){
	});

};

GRIT.popup.multiSelectSearchBoxTR = function(asClsCd, asCd, asCdText, asDefaultArray,isDutyfree, callback, options, params){

	options = jQuery.extend({}, GRIT.popup.defaults, options);
	options.title == undefined ? options.title = "선택" : options.title;

	var pageId = "pop" + GRIT.date.getDateTime("");
    var pagetitle = options.title;
    var asHeight = (options.height == undefined ? 170 : options.height - 106);
    var required = (options.required == undefined ? false : options.required);

    if(typeof $("#" + pageId).dialog('isOpen') !== 'object' || $("#" + pageId).dialog('isOpen') == false){
    	$("#" + pageId).dialog('open');
    	return;
    }

    $dialog = $('<div id="' + pageId + '">');

	var param = {
			"clsCd" : asClsCd,
			"asCd": asCd,
			"asCdText": asCdText,
			"asDefaultArray": asDefaultArray,
			"asHeight": asHeight,
			"isDutyfree": isDutyfree
	};
	
	if(params){
		param = GRIT.util.appendData(params, param);
	}

	$.ajax({
		type: "POST",
		url: "/common/commonMultiSearchPop",
		async: false,
		cache: false,
		data: JSON.stringify(param),
		contentType: "application/json; charset=utf-8",
		datatype: "html",
		success: function(data) {
			$dialog = $('<div id="' + pageId + '" class="popup_wrap"></div>').html(data);
			$dialog.dialog({
						autoOpen  : false
			        	,position : {my:"center", at:"center", of:"#wrap"}
			            ,modal    : options.modal
			            ,width    : options.width
			            ,height   : options.height + 50
			            ,resizable: options.resizable
			            ,title    : pagetitle
			            ,closeOnEscape: false
			            ,buttons  : {
					       	"확인" : function(){
					       		var result = [];
					       		var selectorColumn = CommonMultiSearchPopFc.gridRoot.getObjectById("selector");
					       		var selectedIndices = selectorColumn.getSelectedIndices();
					       		if(required && selectedIndices.length == 0){
					       			GRIT.msg.alert("코드값을 선택하여 주세요.");
					       			return;
					       		}
					       		for(var i=0; i < selectedIndices.length; i++){
					       			result.push(CommonMultiSearchPopFc.gridRoot.getItemAt(selectedIndices[i]));
					       		}
					       		if(typeof callback == 'function'){
					       			callback(result);
					       		}else if(typeof callback == 'string'){
					       			$(callback).val(result.join(","));
					       		}
				       			$(this).dialog("close").dialog('destroy');
					       	},
					       	"닫기": function(){
								$(this).dialog("close").dialog('destroy');
					       }
					     }
				        ,create : function(event, ui){
				    		var close = $(".ui-dialog-titlebar-close");
				    	    close.click(function(){
				    	    	$('#'+pageId).dialog("close").dialog('destroy');
				    	    });
				    	}
			});
		},
		complete: function (xhr, status) {
		    $dialog.dialog('open');
		},
		error: function(request, status, error) {
			//GRIT.msg.alert(request.statusText + ":" + request.responseText);
			GRIT.msg.alert("세션이 종료되어 로그인화면으로 이동합니다.", function(){
				window.location = '/common/login';
			});
			return;
		}
	}).done(function(data){
	});

};

GRIT.popup.singleSelectBoxTR = function(asClsCd, asCd, asCdText, asDefaultVal, callback, options, params){

	options = jQuery.extend({}, GRIT.popup.defaults, options);
	options.title == undefined ? options.title = "선택" : options.title;

	var pageId = "pop" + GRIT.date.getDateTime("");
    var pagetitle = options.title;
    var asHeight = (options.height == undefined ? 170 : options.height - 106);
    var required = (options.required == undefined ? false : options.required);

    if(typeof $("#" + pageId).dialog('isOpen') !== 'object' || $("#" + pageId).dialog('isOpen') == false){
    	$("#" + pageId).dialog('open');
    	return;
    }

    $dialog = $('<div id="' + pageId + '">');

	var param = {
			"clsCd" : asClsCd,
			"asCd": asCd,
			"asCdText": asCdText,
			"asDefaultVal": asDefaultVal,
			"asHeight": asHeight
	};

	if(params){
		param = GRIT.util.appendData(params, param);
	}

	$.ajax({
		type: "POST",
		url: "/common/commonSinglePop",
		async: false,
		cache: false,
		data: JSON.stringify(param),
		contentType: "application/json; charset=utf-8",
		datatype: "html",
		success: function(data) {
			$dialog = $('<div id="' + pageId + '" class="popup_wrap"></div>').html(data);
			$dialog.dialog({
						autoOpen  : false
			        	,position : {my:"center", at:"center", of:"#wrap"}
			            ,modal    : options.modal
			            ,width    : options.width
			            ,height   : options.height + 10
			            ,resizable: options.resizable
			            ,title    : pagetitle
			            ,closeOnEscape: false
			            ,buttons  : {
					       	"확인" : function(){
					       		var idx = CommonSinglePopFc.dataGrid.getSelectedIndex();
					       		result = CommonSinglePopFc.gridRoot.getItemAt(idx);
					       		if(required && result == null){
					       			GRIT.msg.alert("코드값을 선택하여 주세요.");
					       			return;
					       		}
					       		if(typeof callback == 'function'){
					       			callback(result);
					       		}else if(typeof callback == 'string'){
					       			$(callback).val(result.join(","));
					       		}
				       			$(this).dialog("close").dialog('destroy');
					       	},
					       	"닫기": function(){
								$(this).dialog("close").dialog('destroy');
					       }
					     }
				        ,create : function(event, ui){
				    		var close = $(".ui-dialog-titlebar-close");
				    	    close.click(function(){
				    	    	$('#'+pageId).dialog("close").dialog('destroy');
				    	    });
				    	}
			});
			$dialog.dialog().on('keydown',function(evt) {
				
				if (evt.keyCode == $.ui.keyCode.ESCAPE){
					
					dialog.dialog('close');
				}
				evt.stopPropagation();
			});
			
//			$dialog.keydown(function(e) {
//				key = (e) ? e.keyCode : event.keyCode;
//				alert('asdasdasd');
//				if(key == 27){
//					alert("ESC");
//					//$(this).dialog("close").dialog('destroy');
//			    }
//			});
		},
		complete: function (xhr, status) {
		    $dialog.dialog('open');
		},
		error: function(request, status, error) {
			//GRIT.msg.alert(request.statusText + ":" + request.responseText);
			GRIT.msg.alert("세션이 종료되어 로그인화면으로 이동합니다.", function(){
				window.location = '/common/login';
			});
			return;
		}
	}).done(function(data){
	});
};

GRIT.popup.singleSelectSearchBoxTR = function(asClsCd, asCd, asCdText, asDefaultVal, isDutyfree, callback, options, params){

	options = jQuery.extend({}, GRIT.popup.defaults, options);
	options.title == undefined ? options.title = "선택" : options.title;

	var pageId = "pop" + GRIT.date.getDateTime("");
    var pagetitle = options.title;
    var asHeight = (options.height == undefined ? 170 : options.height - 106);
    var required = (options.required == undefined ? false : options.required);

    if(typeof $("#" + pageId).dialog('isOpen') !== 'object' || $("#" + pageId).dialog('isOpen') == false){
    	$("#" + pageId).dialog('open');
    	return;
    }

    $dialog = $('<div id="' + pageId + '">');

	var param = {
			"clsCd" : asClsCd,
			"asCd": asCd,
			"asCdText": asCdText,
			"asDefaultVal": asDefaultVal,
			"asHeight": asHeight,
			"isDutyfree": isDutyfree
	};

	if(params){
		param = GRIT.util.appendData(params, param);
	}
	
	$.ajax({
		type: "POST",
		url: "/common/commonSingleSearchPop",
		async: false,
		cache: false,
		data: JSON.stringify(param),
		contentType: "application/json; charset=utf-8",
		datatype: "html",
		success: function(data) {
			$dialog = $('<div id="' + pageId + '" class="popup_wrap"></div>').html(data);
			$dialog.dialog({
						autoOpen  : false
			        	,position : {my:"center", at:"center", of:"#wrap"}
			            ,modal    : options.modal
			            ,width    : options.width
			            ,height   : options.height + 50
			            ,resizable: options.resizable
			            ,title    : pagetitle
			            ,closeOnEscape: false
			            ,buttons  : {
					       	"확인" : function(){
					       		var idx = CommonSingleSearchPopFc.dataGrid.getSelectedIndex();
					       		result = CommonSingleSearchPopFc.gridRoot.getItemAt(idx);
					       		
					       		if(required && result == null){
					       			GRIT.msg.alert("코드값을 선택하여 주세요.");
					       			return;
					       		}
					       		if(typeof callback == 'function'){
					       			callback(result);
					       		}else if(typeof callback == 'string'){
					       			$(callback).val(result.join(","));
					       		}
				       			$(this).dialog("close").dialog('destroy');
					       	},
					       	"닫기": function(){
								$(this).dialog("close").dialog('destroy');
					       }
					     }
				        ,create : function(event, ui){
				    		var close = $(".ui-dialog-titlebar-close");
				    	    close.click(function(){
				    	    	$('#'+pageId).dialog("close").dialog('destroy');
				    	    });
				    	}
			});
			
		},
		complete: function (xhr, status) {
		    $dialog.dialog('open');
		},
		error: function(request, status, error) {
			//GRIT.msg.alert(request.statusText + ":" + request.responseText);
			GRIT.msg.alert("세션이 종료되어 로그인화면으로 이동합니다.", function(){
				window.location = '/common/login';
			});
			return;
		}
	}).done(function(data){
	});
};

GRIT.popup.setReturn = function(values, valueField, textField) {
	var len = values.length,
		cd = "",
		nm = "",
		valueField = valueField || "cd",
		textField = textField || "cdNm";

	if(len > 0) {
		for(var i = 0 ; i < len ; i++) {
			if(i == 0) {
				cd = values[i][valueField];
			} else {
				cd += "','"+values[i][valueField];
			}
		}

		nm = values[0][textField];

		if(len > 1) {
			nm += " 외 " + (len - 1) + "건";
		}
	}

	return {
		value: cd,
		text: nm
	}
}

//********************************************************************************************
//event 처리
//********************************************************************************************
GRIT.event = new function(){};

GRIT.event.onlyNumber = function(event){
	event = event || window.event;
	var keyID = (event.which) ? event.which : event.keyCode;
	if ( (keyID >= 48 && keyID <= 57) || (keyID >= 96 && keyID <= 105) || keyID == 8 || keyID == 46 || keyID == 37 || keyID == 39 || keyID == 9){
		return;
	} else if(keyID == 189){
		if(!isNaN(event.target.value)){
			event.target.value = event.target.value * (-1);
		}
		return false;
	} else {
		return false;
	}
}

GRIT.event.removeChar = function(event){
	event = event || window.event;
	var keyID = (event.which) ? event.which : event.keyCode;
	if ( keyID == 8 || keyID == 46 || keyID == 37 || keyID == 39 || keyID == 9)
		return;
	else
		event.target.value = event.target.value.replace(/[^0-9]/g, "");
}


//********************************************************************************************
//Chart 처리
//********************************************************************************************
GRIT.chart = new function(){};

GRIT.chart.maxValueRate = 1.1;

/**
 * GRIT.chart.getChartData		: 입력 데이터를 차트에 표시 가능한 데이터로 변환
 * 	- param
 * 		inputArray				: (Array) 입력 데이터
 * 		domainField				: (String) 입력 데이터에서 추출하여 X 또는 Y 축에 Domain으로 표시할 Field 명
 * 		legendField				: (String) 입력 데이터에서 추출하여 Legend로 구분할 Field 명
 * 		valueField				: (String) 입력 데이터에서 추출하여 수치로 표시할 Field 명
 * 		legendTitle				: (String) 입력 데이터에서 추출하여 Legend로 표시할 Field 명 (생략 가능)
 * 		digit					: (Number) valueField 로 추출된 값을 표시할 자릿수 (생략 가능, 기본값 : 0)
 * 	- return					: (Object) 변환한 데이터
 * 		chartList				: (Array) 변환된 차트 데이터
 * 		domainList				: (Array) Domain으로 표시할 데이터
 * 		legendList				: (Array) 차트 내에 Legend로 구분할 기준 데이터
 * 		legendTitle				: (Array) Legend 영역에 표시할 데이터
 * 		maxValue				: (Number) 차트 내에 표시되는 최대값
 * 		minValue				: (Number) 차트 내에 표시되는 최소값
 *
 * 예) var chartData = GRIT.chart.getChartData(data, 'CLOSE_DT', 'BA_CD', 'TOT_AMT', 'AIRPORT_NM', 3);
 */
GRIT.chart.getChartData = function(inputArray, domainField, legendField, valueField, legendTitle, digit) {
    var len = inputArray.length,
	    rtnData = {},
	    chartData = {},
	    domainList = {},
	    legendList = {},
	    domain,
	    legend,
	    value,
	    maxValue,
	    minValue,
	    i,
	    digit = digit || 0,
	    divValue = Math.pow(10, digit);

	maxValue = minValue = Math.floor(inputArray[0][valueField] / divValue);

	for(i = 0 ; i < len ; i++) {
	    domain = inputArray[i][domainField];
	    legend = inputArray[i][legendField];
	    value = Math.floor(inputArray[i][valueField] / divValue * 100) / 100;

	    domainList[domain] = '';
	    legendList[legend] = inputArray[i][legendTitle];

	    chartData[domain] = chartData[domain] || {};
	    chartData[domain][legend] = value;

	    if(maxValue < value) {
	        maxValue = value;
	    }

	    if(minValue > value) {
	        minValue = value;
	    }
	}

	var domainArray = Object.keys(domainList),
	    chartArray = [];

	len = domainArray.length;

	for(i = 0 ; i < len ; i++) {
	    chartArray[i] = chartData[domainArray[i]];
	    chartArray[i][domainField] = domainArray[i];
	}

	rtnData = {
	    chartList: chartArray,
	    domainList: domainArray,
	    legendList: Object.keys(legendList),
	    legendTitle: legendList,
	    maxValue: maxValue,
	    minValue: minValue
	};

	return rtnData;
};

/**
 * GRIT.chart.getChartSumData	: 입력 데이터를 차트에 표시 가능한 데이터로 변환
 * 	- param
 * 		inputArray				: (Array) 입력 데이터
 * 		domainField				: (String) 입력 데이터에서 추출하여 X 또는 Y 축에 Domain으로 표시할 Field 명
 * 		legendField				: (String) 입력 데이터에서 추출하여 Legend로 구분할 Field 명
 * 		valueField				: (String) 입력 데이터에서 추출하여 수치로 표시할 Field 명
 * 		legendTitle				: (String) 입력 데이터에서 추출하여 Legend로 표시할 Field 명 (생략 가능)
 * 		digit					: (Number) valueField 로 추출된 값을 표시할 자릿수 (생략 가능, 기본값 : 0)
 * 		yearField				: (String) 년도 구분 Field 명
 * 		prevYearCdArray			: (Array) 년도 구분 코드
 * 		prevYearNmArray			: (Array) 년도 구분 명칭
 * 	- return					: (Object) 변환한 데이터
 * 		chartList				: (Array) 변환된 차트 데이터
 * 		domainList				: (Array) Domain으로 표시할 데이터
 * 		legendList				: (Array) 차트 내에 Legend로 구분할 기준 데이터
 * 		legendTitle				: (Array) Legend 영역에 표시할 데이터
 * 		maxValue				: (Number) 차트 내에 표시되는 최대값
 * 		minValue				: (Number) 차트 내에 표시되는 최소값
 *
 * 예) var chartData = GRIT.chart.getChartSumData(data, 'CLOSE_DT', 'BA_CD', 'TOT_AMT', 'AIRPORT_NM', 3, 'viewFgCd', ['CUR', 'PRE'], ['', '(전년)']);
 */
GRIT.chart.getChartSumData = function(inputArray, domainField, legendField, valueField, legendTitle, digit, yearField, prevYearCdArray, prevYearNmArray, domainData) {
    var len = inputArray.length,
	    rtnData = {},
	    chartData = {},
	    domainList = {},
	    legendList = {},
	    domain,
	    legend,
	    value,
	    maxValue,
	    minValue,
	    i, j,
	    digit = digit || 0,
	    divValue = Math.pow(10, digit);

    if(yearField) {
    	var yearLen = prevYearCdArray.length,
    		legendCd;

		for(i = 0 ; i < len ; i++) {
		    domain = inputArray[i][domainField];
		    legend = inputArray[i][legendField] || 'Total';

		    domainList[domain] = '';

		    if(!chartData[domain]) {
		    	chartData[domain] = {};
		    }

		    for(j = 0 ; j < yearLen ; j++) {
		    	legendCd = legend + '^' + prevYearCdArray[j];

			    legendList[legendCd] = (inputArray[i][legendTitle] || 'Total') + prevYearNmArray[j];

			    if(!chartData[domain][legendCd]) {
			    	chartData[domain][legendCd] = 0;
			    }

			    if(inputArray[i][yearField] == prevYearCdArray[j]) {
			    	chartData[domain][legendCd] += inputArray[i][valueField];
			    }
		    }
		}

		legend = legendCd;
    } else {
		for(i = 0 ; i < len ; i++) {
		    domain = inputArray[i][domainField];
		    legend = inputArray[i][legendField] || 'Total';

		    domainList[domain] = '';
		    legendList[legend] = inputArray[i][legendTitle] || 'Total';

		    if(!chartData[domain]) {
		    	chartData[domain] = {};
		    }

		    if(!chartData[domain][legend]) {
		    	chartData[domain][legend] = 0;
		    }

		    chartData[domain][legend] += inputArray[i][valueField];
		}
    }

	maxValue = minValue = Math.floor(chartData[domain][legend] / divValue);

	var domainArray = Object.keys(domainList),
		legendArray = Object.keys(legendList),
	    chartArray = [];

	if(domainData && domainData.length > 0) {
		domainArray = domainData;
	}

	domainCnt = domainArray.length;
	legendCnt = legendArray.length;

	var defaultData = {};

	for(j = 0 ; j < legendCnt ; j++) {
		defaultData[legendArray[j]] = 0;
	}

	for(i = 0 ; i < domainCnt ; i++) {
	    chartArray[i] = $.extend($.extend({}, defaultData), chartData[domainArray[i]]);
	    chartArray[i][domainField] = domainArray[i];

		for(j = 0 ; j < legendCnt ; j++) {
		    value = chartArray[i][legendArray[j]] ? Math.floor(chartArray[i][legendArray[j]] / divValue * 100) / 100 : 0;

		    chartArray[i][legendArray[j]] = value;

		    if(maxValue < value) {
		        maxValue = value;
		    }

		    if(minValue > value) {
		        minValue = value;
		    }
		}
	}

	rtnData = {
	    chartList: chartArray,
	    domainList: domainArray,
	    legendList: legendArray,
	    legendTitle: legendList,
	    maxValue: maxValue,
	    minValue: minValue
	};

	return rtnData;
};

/**
 * GRIT.chart.getChartObject		: 입력 데이터를 차트 Object로 변환
 * 	- param
 * 		inputArray				: (Array) 입력 데이터
 * 		domainField				: (String) 입력 데이터에서 추출하여 X 또는 Y 축에 Domain으로 표시할 Field 명
 * 		legendField				: (String) 입력 데이터에서 추출하여 Legend로 구분할 Field 명
 * 		valueField				: (String) 입력 데이터에서 추출하여 수치로 표시할 Field 명
 * 		legendTitle				: (String) 입력 데이터에서 추출하여 Legend로 표시할 Field 명 (생략 가능)
 * 		digit					: (Number) valueField 로 추출된 값을 표시할 자릿수 (생략 가능, 기본값 : 0)
 * 		chartType				: (String) 표시할 차트 종류 (현재 'line'만 가능)
 * 		axisXFormatFunc			: (Function) Domain 값을 변환하여 표시하는 함수 (생략 가능)
 * 		padding					: (Object) 차트의 padding 값 (생략 가능, 기본값 : {right: 50})
 * 	- return					: (Object) 변환한 차트 Object
 *
 * 예) var chartData = GRIT.chart.getChartObject(data, 'CLOSE_DT', 'BA_CD', 'TOT_AMT', 'AIRPORT_NM', 3, 'line', function(s){return s.substr(6,2);});
 */
GRIT.chart.getChartObject = function(inputArray, domainField, legendField, valueField, legendTitle, digit, chartType, axisXFormatFunc, padding) {
    var chartData = GRIT.chart.getChartData(inputArray, domainField, legendField, valueField, legendTitle, digit);
    var chartInfo = {};
    axisXFormatFunc = axisXFormatFunc || function(s) {
        return s.substr(0,4) + '-' + s.substr(4,2) + '-' + s.substr(6,2);
    };
    padding = padding || {right: 50};

    //minValue = Math.floor((chartData.minValue / 1000) * 1000);
    minValue = 0;
    maxValue = Math.ceil((chartData.maxValue / 1000) * 1000) * GRIT.chart.maxValueRate;

    minValue = minValue <= 1 ? 0 : minValue;
    maxValue = maxValue <= 5 ? 5 : maxValue;

    if(chartType == 'line') {
        chartInfo = {
            axis: [
                {
                    x: {
                        type: 'block',
                        domain: domainField,
                        format: axisXFormatFunc,
                        line: true,
                        orient: ''
                    },
                    y: {
                        type: 'range',
                        domain: [ minValue, maxValue ],
                        format: GRIT.util.numberFormat,
                        step: 5,
                        line: true
                    },
                    data: chartData.chartList,
                    padding: padding
                }
            ],
            brush: [
                {
                    type: 'line',
                    target: chartData.legendList,
                    display: 'all'
                }
            ],
            widget: [
                {
                    type: 'legend',
                    align: 'center',
                    orient: 'right',
                    filter: true,
                    format: function(s) {
                        return chartData.legendTitle[s];
                    }
                },
                {
                    type : "tooltip"
                },
                {
                    type: 'zoom'
                },
                {
                	type:"title",
                	text:"단위:백만원",
                	orient:"top",
                	align:"start"
                }
            ],
            style : {
                titleFontSize : 12,
                titleFontWeight : 700
            }
        };
    } else if(chartType == 'column3d') {
        chartInfo = {
            axis : {
                x : {
                    type : "block",
                    domain: domainField,
                    format: axisXFormatFunc
                },
                y : {
                    type : "range",
                    domain: [ minValue, maxValue ],
                    format: GRIT.util.numberFormat,
                    step : 5
                },
                c : {
                    type : "grid3d",
                },
                data : chartData.chartList,
                depth : 20,
                degree : 30,
                padding: padding
            },
            brush : {
                type : "column3d",
                target : chartData.legendList,
                outerPadding : 10,
                innerPadding : 5
            },
            widget: [
                {
                    type: 'legend',
                    align: 'center',
                    orient: 'right',
                    filter: true,
                    format: function(s) {
                        return chartArray.legendTitle[s];
                    }
                },
                {
                    type : "tooltip"
                },
                {
                    type: 'zoom'
                }
            ],
            style : {
                gridAxisBorderColor : "black",
                gridBorderColor : "#dcdcdc"
            }
        }
    }

    return chartInfo;
}

/**
 * GRIT.chart.getAnaChartObject	: 입력 데이터를 분석 화면 차트 Object로 변환
 * 	- param
 * 		chartData				: (Array) 입력 데이터
 * 		chartLegend				: (Array) 우측에 표시할 Legend 목록
 * 	- return					: (Object) 변환한 차트 Object
 *
 * 예) var chartData = GRIT.chart.getAnaChartObject(chartData, chartLegend);
 */
GRIT.chart.getAnaChartObject = function(chartData, chartLegend, legendTitle, minVal, maxVal, title, domainFormat, chartSndData) {
	title = title || "백만원";
	maxVal = maxVal ? Math.ceil(maxVal * GRIT.chart.maxValueRate / 10) * 10 : 0;
	minVal = !minVal || minVal > 0 ? 0 : Math.floor(minVal);
	if(minVal == maxVal) {
		maxVal += 10;
	}
	domainFormat = typeof domainFormat == "function" ? domainFormat : function(str, idx) {return str};

	var sndFg = false,
		sndPaddingRight = 0,
		tooltipIdx = 1;

	if(chartSndData && chartSndData.chartList) {
		sndFg = true;

		chartSndData.maxValue = chartSndData.maxValue ? Math.ceil(chartSndData.maxValue * GRIT.chart.maxValueRate / 10) * 10 : 0;
		chartSndData.minValue = !chartSndData.minValue || chartSndData.minValue > 0 ? 0 : Math.floor(chartSndData.minValue);
		if(chartSndData.minValue == chartSndData.maxValue) {
			chartSndData.maxValue += 10;
		}

		sndPaddingRight = chartSndData.maxValue.toString().length * 6 + 20;

		legendTitle = $.extend({}, legendTitle, chartSndData.legendTitle);
		tooltipIdx++;
	}

	var paddingLeft = 20,
		paddingRight = 20,
		len = chartLegend.length,
		textArray = Object.values(legendTitle),
		textLen = 0,
		maxLen = 0;

	paddingLeft = maxVal.toString().length * 6;

    if(len <= 15) {
    	for(var i = 0 ; i < len ; i++) {
    		textLen = GRIT.string.byteLength(textArray[i]);

    		if(maxLen < textLen) {
    			maxLen = textLen;
    		}
    	}

    	paddingRight = maxLen * 6 + sndPaddingRight;
    }

    var chartInfo = {
        theme : 'jennifer',
        padding : {top: 40, bottom: 30, left: paddingLeft, right: paddingRight},
        axis : [
            {
	            x: {
	                type : 'block',
	                domain : "saleDt",
	                format: domainFormat,
	                line : 'dashed',
                    //textRotate: -30,
	                orient: ''
	            },
	            y: {
	                type : 'range',
	                domain : [minVal, maxVal],
	                format: GRIT.util.numberFormat,
	                step : 10,
	                line : 'dashed'
	            },
	            //buffer: 12,
	            data: chartData,
	            padding: {
	            	right: 50,
	            	left: 30
	            }
	        }
        ],
        brush : [
            {
                type : 'line',
                axis: 0,
                target : chartLegend,
                //animate : true,
                display : "all"
            },
            {
                type : 'scatter',
                axis: 0,
                target : chartLegend,
                symbol : "circle",
                size : 7
            }
        ],
        widget : [
            {
                type:"title",
                text:"단위 : " + title,
                orient:"top",
                align:"start"
            },
            {
                type : "tooltip",
                brush : tooltipIdx,
                format: function(d, k) {
                    return {
                    	key: legendTitle[k],
                    	value: d[k]
                    };
                }
            },
            {
                type: 'zoom'
            }
        ],
        style : {
            gridTickPadding : 10,
            titleFontSize : 12,
            titleFontWeight : 700
        },
        format : function(v) {
            if(typeof(v) == "number") {
                return GRIT.util.numberFormat(v, null, 2);
            }
            return v;
        }
    }

    if(len <= 15) {
    	chartInfo.widget.push({
	        type: 'legend',
	        align: 'center',
	        orient: 'right',
	        filter: true,
	        format: function(s) {
	            return legendTitle[s];
	        },
	        brush: [0,1,2],
	        brushSync: true
	    });
    }

    if(sndFg) {
    	chartInfo.axis.push({
            x: {
                type : 'block',
                domain : "saleDt",
                format: domainFormat,
                line : 'dashed',
                //textRotate: -30,
                orient: ''
            },
            y: {
                type : 'range',
                domain : [chartSndData.minValue, chartSndData.maxValue],
                format: GRIT.util.numberFormat,
                step : 10,
                line : 'dashed',
                orient: 'right'
            },
            //buffer: 12,
            data: chartSndData.chartList,
            padding: {
            	right: 50,
            	left: 30
            }
    	});
    	chartInfo.brush.unshift({
            type : "area",
            //animate: true,
            target: chartSndData.legendList,
            axis: 1
    	});

    	chartInfo.widget.push({
            type:"title",
            text:"여객수(단위:천명)",
            orient:"top",
            align:"end"
        });
    }

    return chartInfo;
}


/**
 * GRIT.chart.showAnaChart		: 매출분석 차트 표시
 * 	- param
 * 		target					: (String) 차트를 표시할 DIV의 Selector 값
 * 		dataArray				: (Array) 표시할 데이터
 * 		option					: (JSON) 차트에 표시할 속성 정보
 * 			. domainField		: (String) 가로 축에 표시할 Field 명
 * 			. legendField		: (String) legend에 표시할 Field 명
 * 			. legendTitle		: (String) legend에 표시할 Text 명
 * 			. valueField		: (String) 세로 축에 표시할 Field 명
 * 			. digit				: (Number) 세로 축에 표시할 값의 자리수 단위
 * 			. yearField			: (String) 전월비교시 년도를 구분하는 Field 명 (없을 경우 1개의 년도만 표시)
 * 			. prevYearCdArray	: (Array) 전월비교시 년도 값
 * 			. prevYearNmArray	: (Array) 전월비교시 년도 명
 * 			. titleNm			: (String) 세로 축에 상단에 표시할 Title 명
 * 			. domainFormat		: (Function) 가로 축에 표시할 문자열의 포멧 함수
 * 	- return					: 없음
 *
 * 예) GRIT.chart.showAnaChart(chartData, chartLegend);
 */
GRIT.chart.showAnaChart = function(target, dataArray, option) {
	$(target).empty();
	if(dataArray.length > 0 || (option.sndData && option.sndData.length && option.sndData.length > 0)) {
		var domainField = option.domainField,
			legendField = option.legendField,
			legendTitle = option.legendTitle,
			valueField = option.valueField,
			digit = option.digit,
			yearField = option.yearField,
			prevYearCdArray = option.prevYearCdArray,
			prevYearNmArray = option.prevYearNmArray,
			domainArray = option.domainArray,
			chartData,
			chartSndData;

		if(option.sndData && option.sndData.length && option.sndData.length > 0) {
			var len = option.sndTrgLegendField.length;
			for(var i = 0 ; i < len ; i++) {
				if(legendField == option.sndTrgLegendField[i]) {
					chartSndData = GRIT.chart.getChartSumData(option.sndData, domainField, legendField, option.sndValueField, legendTitle, 3, yearField, prevYearCdArray, prevYearNmArray, domainArray);
					break;
				}
			}

			if(!dataArray || !dataArray.length || dataArray.length <= 0) {
				dataArray = option.sndData;
			}
		}

		chartData = GRIT.chart.getChartSumData(dataArray, domainField, legendField, valueField, legendTitle, digit, yearField, prevYearCdArray, prevYearNmArray, domainArray);

		var chartObject = GRIT.chart.getAnaChartObject(chartData.chartList, chartData.legendList, chartData.legendTitle, chartData.minValue, chartData.maxValue, option.titleNm, option.domainFormat, chartSndData);

		jui.ready([ "chart.builder" ], function(chart) {
			chart(target, chartObject);
		});
	}
}


/**
 * GRIT.chart.setAnaChartArea	: 매출분석 차트 영역 설정
 * 	- param
 * 		params					: (JSON) 차트 표시영역의 설정 정보
 * 			. legendSelector	: (String) legent 선택 영역 Selector
 * 			. valueSelector		: (String) value 선택 영역 Selector
 * 			. chartSelector		: (String) 차트 영역 Selector
 * 			. legendList		: (Array) legent 선택 영역에 표시할 목록
 * 			. valueList			: (Array) value 선택 영역에 표시할 목록
 * 			. chartData			: (Array) 차트에 표시할 데이터
 * 			. chartOption		: (JSON) 차트에 표시할 속성 정보
 * 			. domainFormat		: (Function) 가로 축에 표시할 문자열의 포멧 함수
 * 			. domainArray		: (Array) 가로 축에 표시할 문자열 목록
 * 	- return					: 없음
 *
 * 예) GRIT.chart.setAnaChartArea(params);
 */
GRIT.chart.setAnaChartArea = function(params) {
	var legendTd = $(params.legendSelector);
	var valueTd = $(params.valueSelector);
	var legendList = params.legendList,
		valueList = params.valueList,
		chartData = params.chartData,
		chartOption = params.chartOption,
		len, i, checked;


	legendTd.empty();
	len = legendList.length;

	for(i = 0 ; i < len ; i++) {
		checked = (i == 0) ? ' checked="checked"' : '';

		legendTd.append($('<input type="radio" name="MenuName"' + checked + ' value="' + legendList[i][0] + '" legendNm="' + legendList[i][1] + '"><label>' + legendList[i][2] + '</label>'));
	}

	legendTd.find('input').change(function() {
		chartOption.legendField = $(this).val();
		chartOption.legendTitle = $(this).attr("legendNm");
		GRIT.chart.showAnaChart(params.chartSelector, chartData, chartOption);
	});

	valueTd.empty();
	len = valueList.length;

	for(i = 0 ; i < len ; i++) {
		checked = (i == 0) ? ' checked="checked"' : '';

		valueTd.append($('<input type="radio" name="dataName"' + checked + ' value="' + valueList[i][0] + '" titleNm="' + valueList[i][1] + '" digit="' + valueList[i][2] + '"><label>' + valueList[i][3] + '</label>'));
	}

	valueTd.find('input').change(function() {
		chartOption.valueField = $(this).val();
		chartOption.titleNm = $(this).attr("titleNm");
		chartOption.digit = $(this).attr("digit");
		GRIT.chart.showAnaChart(params.chartSelector, chartData, chartOption);
	});

	chartOption.legendField = legendList[0][0];
	chartOption.legendTitle = legendList[0][1];
	chartOption.valueField = valueList[0][0];
	chartOption.titleNm = valueList[0][1];
	chartOption.digit = valueList[0][2];

	GRIT.chart.showAnaChart(params.chartSelector, chartData, chartOption);
}

//********************************************************************************************
//Grid 처리
//********************************************************************************************
GRIT.grid = new function(){};

GRIT.grid.defaultStyle = '\
		<Style>\
			.gridStyle {\
				color:#000;\
				alternatingItemColors:#FFFFFF,#F6F6F6;\
				headerColors:#337FA2,#0F5F95;\
				headerStyleName:rMateDataGridHeaderStyles;\
				headerBorderBottomColor:#0F5F95\
				horizontalGridLines:true;\
				horizontalGridLineColor:#E3E3E3;\
				selectionColor:#FCFF91;\
				rollOverColor:#558FC4;\
				fontWeight:normal;\
				textDecoration:none;\
				fontSize:12;\
				verticalAlign:middle;\
				verticalGridLineColor:#E3E3E3;\
				backgroundColor:#fff;\
				borderColor:#E3E3E3;\
				borderWidth:1;\
				borderStyle:solid;\
			}\
		</Style>';

/**
* GRIT.grid.getPivotLayout		: Pivot Grid Layout 생성
* 	- param
* 		lockedColumnCount		: (Number) Lock 되는 Column 개수
* 		groupTextArray			: (Array) 입력 데이터에서 Group Header의 Text List
* 		groupFieldArray			: (Array) 입력 데이터에서 Group Header의 Field명 List
* 		groupAlignArray			: (Array) 입력 데이터에서 Group Header의 정렬기준 List (center/right/left)
* 		pivotTextArray			: (Array) 입력 데이터에서 Pivot Header의 Text List
* 		pivotValueArray			: (Array) 입력 데이터에서 Pivot Key로 사용될 값 List
* 		valueTextArray			: (Array) 입력 데이터에서 Value Header의 Text List
* 		valueFieldArray			: (Array) 입력 데이터에서 Value Header의 Field명 List
* 		valueAlignArray			: (Array) 입력 데이터에서 Value Header의 정렬기준 List (center/right/left)
* 	- return					: (Object) 변환한 데이터
* 		layoutStr				: (String) 변환된 Pivot Grid Layout
*
* 예) var pivotData = GRIT.grid.getPivotLayout(data, ['BA_CD'],['BA_CD','AIRPORT_NM'],['CLOSE_DT'],['TOT_AMT']);
*/


/**
* GRIT.grid.getKey				: 입력 데이터의 Key 목록으로 구성한 값을 반환
* 	- param
* 		inputData				: (Object) 입력 데이터
* 		fieldArray				: (Array) 입력 데이터에서 Key로 사용될 Field List
* 	- return					: (String) Key Data
*
* 예) var pivotData = GRIT.grid.getKey(data, ['CLOSE_DT']);
*/
GRIT.grid.getKey = function(record, fieldArray) {
    var len = fieldArray.length, k;
    var keys = '';

    for(k = 0 ; k < len ; k++) {
        keys += '^' + record[fieldArray[k]];
    }

    return keys.substr(1);
}

/**
* GRIT.grid.getPivotKeyList		: 입력 데이터의 Pivot Key 목록을 추출
* 	- param
* 		inputArray				: (Array) 입력 데이터
* 		pivotKeyArray			: (Array) 입력 데이터에서 Pivot Key로 사용될 Field List
* 	- return					: (Array) Pivot으로 표시하는 Key List
*
* 예) var pivotData = GRIT.grid.getPivotKeyList(data, ['CLOSE_DT']);
*/
GRIT.grid.getPivotKeyList = function(inputArray, pivotKeyArray) {
    var iLen = inputArray.length,
    	pivotKey,
        pivotKeyList = {},
        i;

    for(i = 0 ; i < iLen ; i++) {

        pivotKey = GRIT.grid.getKey(inputArray[i], pivotKeyArray);

        pivotKeyList[pivotKey] = '';
    }

    return Object.keys(pivotKeyList);
};


/**
* GRIT.grid.getPivotData			: 입력 데이터를 Pivot Grid에 표시 가능한 데이터로 변환
* 	- param
* 		inputArray				: (Array) 입력 데이터
* 		groupKeyArray			: (Array) 입력 데이터에서 Group Key로 사용될 Field List
* 		groupFieldArray			: (Array) 입력 데이터에서 Group Data로 표시할 Field List
* 		pivotKeyArray			: (Array) 입력 데이터에서 Pivot Key로 사용될 Field List
* 		valueFieldArray			: (Array) 입력 데이터에서 Value Data로 사용될 Field List
* 	- return					: (Object) 변환한 데이터
* 		pivotData				: (Array) 변환된 Pivot Grid 데이터
* 		pivotKeyList			: (Array) Pivot으로 표시하는 Key List
*
* 예) var pivotData = GRIT.grid.getPivotData(data, ['BA_CD'],['BA_CD','AIRPORT_NM'],['CLOSE_DT'],['TOT_AMT']);
*/
GRIT.grid.getPivotData = function(inputArray, groupKeyArray, groupFieldArray, pivotKeyArray, valueFieldArray, sumFieldArray, countFieldArray) {
    var iLen = inputArray.length;
    var gLen = groupFieldArray.length;
    var vLen = valueFieldArray.length;
    var sLen = sumFieldArray.length;
    var cLen = countFieldArray.length;
    var recordData = {};
    var returnData = {},
        groupKey,
        pivotKey,
        pivotKeyList = {},
        i, j;

    for(i = 0 ; i < iLen ; i++) {
        recordData = inputArray[i];

        groupKey = GRIT.grid.getKey(recordData, groupKeyArray);
        pivotKey = GRIT.grid.getKey(recordData, pivotKeyArray);

        pivotKeyList[pivotKey] = '';

        if(!returnData[groupKey]) {
            returnData[groupKey] = {};

            for(j = 0 ; j < sLen ; j++) {
                returnData[groupKey][sumFieldArray[j] + 'Sum'] = 0;
            }

            for(j = 0 ; j < cLen ; j++) {
                returnData[groupKey][countFieldArray[j] + 'Cnt'] = 0;
            }
        }

        for(j = 0 ; j < gLen ; j++) {
            returnData[groupKey][groupFieldArray[j]] = recordData[groupFieldArray[j]];
        }

        for(j = 0 ; j < vLen ; j++) {
            returnData[groupKey][valueFieldArray[j] + '^' + pivotKey] = recordData[valueFieldArray[j]];
        }

        for(j = 0 ; j < sLen ; j++) {
            returnData[groupKey][sumFieldArray[j] + 'Sum'] += recordData[sumFieldArray[j]];
        }

        for(j = 0 ; j < cLen ; j++) {
            returnData[groupKey][countFieldArray[j] + 'Cnt'] += 1;
        }
    }

    rtnData = {
        pivotData: Object.values(returnData),
        pivotKeyList: Object.keys(pivotKeyList)
    };

    return rtnData;
};

/**
* GRIT.grid.getAnaPivotData		: 입력 데이터를 분석 Pivot Grid에 표시 가능한 데이터로 변환
* 	- param
* 		inputArray				: (Array) 입력 데이터
* 		yearFgArray				: (Array) 입력 데이터에서 년도구분으로 사용될 값 List
* 		yearNmArray				: (Array) 입력 데이터에서 년도구분으로 표시할 값 List
* 		yearKeyField			: (String) 입력 데이터에서 년도구분으로 사용될 Field
* 		groupKeyArray			: (Array) 입력 데이터에서 Group Key로 사용될 Field List
* 		pivotKeyField			: (String) 입력 데이터에서 Pivot으로 사용될 Field
* 		groupFieldArray			: (Array) 입력 데이터에서 Group Data로 표시할 Field List
* 		pivotListArray			: (Array) 입력 데이터에서 Pivot Field의 값 List
* 		valueFieldArray			: (Array) 입력 데이터에서 Value Data로 사용될 Field List
* 	- return					: (Array) 변환한 데이터
*
* 예) var pivotData = GRIT.grid.getAnaPivotData(data, ['CUR','PRE'], ['올해','전년'],'viewFg',['baCd'],'saleDt',['airportNm'],['20161101','20161102','....'],[totAmt']);
*/
GRIT.grid.getAnaPivotData = function(inputArray, yearFgArray, yearNmArray, yearKeyField, groupKeyArray, pivotKeyField, groupFieldArray, pivotListArray, valueFieldArray) {
    var iLen = inputArray.length;
    var yLen = yearFgArray.length;
    var gLen = groupFieldArray.length;
    var pLen = pivotListArray.length;
    var vLen = valueFieldArray.length;
    var recordData = {};
    var returnData = {},
        groupKey,
        pivotKey,
        defaultData = {},
        i, j, k;

    for(i = 0 ; i < pLen ; i++) {
        for(j = 0 ; j < vLen ; j++) {
            defaultData[valueFieldArray[j] + '^' + pivotListArray[i]] = 0;
        }
    }

    for(i = 0 ; i < iLen ; i++) {
        recordData = inputArray[i];

        groupKey = GRIT.grid.getKey(recordData, groupKeyArray);

        if(!returnData[groupKey + '^' + yearFgArray[0]]) {
            for(j = 0 ; j < yLen ; j++) {
                returnData[groupKey + '^' + yearFgArray[j]] = $.extend({yearNm : yearNmArray[j]}, defaultData);

            	for(k = 0 ; k < gLen ; k++) {
            		if(groupFieldArray[k] != 'yearNm') {
            			returnData[groupKey + '^' + yearFgArray[j]][groupFieldArray[k]] = recordData[groupFieldArray[k]];
            		}
                }
            }
        }

        for(j = 0 ; j < vLen ; j++) {
            returnData[groupKey + '^' + recordData[yearKeyField]][valueFieldArray[j] + '^' + recordData[pivotKeyField]] += recordData[valueFieldArray[j]];
        }
    }

    rtnData = Object.values(returnData);

    return rtnData;
};

/**
* GRIT.grid.showProgressBar		: 그리드에 진행바 표시
* 	- param
* 		gridRoot				: (Component) 처리할 그리드 Root 객체
* 		procCnt				    : (Number) 처리중인 건수
* 		totalCnt				: (Number) 총 건수
* 		showMsg 				: (String) 표시할 메시지 (Default : procCnt / totalCnt )
* 	- return					: 없음
*
* 예) GRIT.grid.showProgressBar(gridRoot, 100, 1000);
*/
GRIT.grid.showProgressBar = function(gridRoot, procCnt, totalCnt, showMsg) {
    var dataGrid = gridRoot.getDataGrid();
    dataGrid.setEnabled(false);
    gridRoot.addProgressBar();

    var progressBar = gridRoot.getProgressBar();
    progressBar.setProgress(procCnt, totalCnt);
    progressBar.setLabel(procCnt + " / " + totalCnt);
}

/**
* GRIT.grid.hideProgressBar		: 그리드에서 진행바 제거
* 	- param
* 		gridRoot				: (Component) 처리할 그리드 Root 객체
* 	- return					: 없음
*
* 예) GRIT.grid.hideProgressBar(gridRoot);
*/
GRIT.grid.hideProgressBar = function(gridRoot) {
    var dataGrid = gridRoot.getDataGrid();
    dataGrid.setEnabled(true);
    gridRoot.removeProgressBar();
}

/**
* GRIT.grid.showLoadingBar		: 그리드에 진행바 표시
* 	- param
* 		gridRoot				: (Component) 처리할 그리드 Root 객체
* 	- return					: 없음
*
* 예) GRIT.grid.showLoadingBar(gridRoot);
*/
GRIT.grid.showLoadingBar = function(gridRoot) {
    var dataGrid = gridRoot.getDataGrid();
    dataGrid.setEnabled(false);
    gridRoot.addLoadingBar();
}

/**
* GRIT.grid.hideLoadingBar		: 그리드에서 진행바 제거
* 	- param
* 		gridRoot				: (Component) 처리할 그리드 Root 객체
* 	- return					: 없음
*
* 예) GRIT.grid.hideLoadingBar(gridRoot);
*/
GRIT.grid.hideLoadingBar = function(gridRoot) {
    var dataGrid = gridRoot.getDataGrid();
    dataGrid.setEnabled(true);
    gridRoot.removeLoadingBar();
}

GRIT.grid.excelExport = function(layerNm, gridRoot, fileNm, excelType, addGrid, title) {
	GRIT.tran.send({
		url: "/common/checkBtnAuth",
		sendData: {layerName:layerNm},
		success: function(result){
			var dataGrid = gridRoot.getDataGrid();
			dataGrid.exportType = "xlsx";
			dataGrid.exportFileName = fileNm;
			
			if(title) {
				dataGrid.exportTitle = title;
			}
			
			if(excelType == "1") {
				gridRoot.excelExportSave();
			} else if(excelType == "2") {
				gridRoot.excelMultiExportSave();
			} else if(excelType == "3") {
				gridRoot.excelMultiExportSave(addGrid);
			}
		},
		loadingTarget: layerNm
	});
}


//********************************************************************************************
//Menu 처리
//********************************************************************************************
/*GRIT.menu = {
	homeSelecter: '#headerWrap .top-menu a.btn-home',
	lnbListSelecter: '#lnbWrap .lnb ul.lnb_list li a.first',
	menuListSelecter: '#lnbWrap .lnb ul.lnb_list li.depth1 ul.depth2 li a',
	menuOnceSelecter: '#lnbWrap .lnb ul.lnb_list li.depth1 ul.depth2 li.#{layerName} a',
	boxContentSelecter: 'div.tabtopmenu.boxcontent.#{layerName}'
};*/
GRIT.menu = {
	homeSelecter: '#headerWrap .top-menu a.btn-home',
	lnbListSelecter: '#lnbWrap .menuDepth1 .first',
	menuListSelecter: '#lnbWrap .menuDepth2List li a',
	menuOnceSelecter: '#lnbWrap .lnb ul.lnb_list li.depth1 ul.depth2 li.#{layerName} a',
	boxContentSelecter: '.contentWrap.topMdiWrap.#{layerName}'
};

/**
* GRIT.menu.openMenu				: 메뉴열기
* 	- param
* 		layerName				: (String) 열고자하는 화면ID
* 		params					: (JSON) 해당 화면으로 넘겨줄 데이터
* 	- return					: Null
*
* 예) GRIT.menu.openMenu('menu0401', {custId:'',saleDt:''});
*/
GRIT.menu.openMenu = function(layerName, params) {
	var menuList = $(GRIT.menu.menuOnceSelecter.replace('#{layerName}', layerName));

	if(menuList.length > 0) {
		__openMenuTab('menu', $(GRIT.menu.menuOnceSelecter.replace('#{layerName}', layerName))[0], params);
	} else {
		mFnc.alert('alert','해당 메뉴의 권한이 없습니다.');
		return;
	}
};

/**
* GRIT.menu.getMenuParams		: 메뉴 파라미터 가져오기
* 	- param
* 		layerName				: (String) 대상 화면ID
* 	- return					: (JSON) 화면로딩시 입력한 데이터
*
* 예) var params = GRIT.menu.getMenuParams('menu0401');
*/
GRIT.menu.getMenuParams = function(layerName) {
	return $('div.tabtopmenu.boxcontent.' + layerName).data('params');
};


//********************************************************************************************
//Window 처리
//********************************************************************************************
GRIT.window = new function(){};

GRIT.window.inLoadingBarCount = 0;

/**
* GRIT.window.cancelFullScreen	: Full Screen 취소
* 	- param
* 		el						: (Object) Document
* 	- return					: Null
*
* 예) GRIT.window.cancelFullScreen(document);
*/
GRIT.window.cancelFullScreen = function(el) {
    var requestMethod = el.cancelFullScreen||el.webkitCancelFullScreen||el.mozCancelFullScreen||el.exitFullscreen;
    if (requestMethod) { // cancel full screen.
        requestMethod.call(el);
    } else if (typeof window.ActiveXObject !== "undefined") { // Older IE.
        var wscript = new ActiveXObject("WScript.Shell");
        if (wscript !== null) {
            wscript.SendKeys("{F11}");
        }
    }
	//'#headerWrap').height(103);
	$('#lnbWrap').width(200);
    /*
    $('#lnbWrap').width('200px');
    contentW();
    */
};

/**
* GRIT.window.requestFullScreen	: Full Screen 적용
* 	- param
* 		el						: (Object) Document
* 	- return					: Null
*
* 예) GRIT.window.requestFullScreen(document.body);
*/
GRIT.window.requestFullScreen = function(el) {

	$('#lnbWrap').width(0);
	$('#headerWrap').height(0);
	/*
    $('#lnbWrap').width('0px');
    contentW();
	*/
    // Supports most browsers and their versions.
    var requestMethod = el.requestFullScreen || el.webkitRequestFullScreen || el.mozRequestFullScreen || el.msRequestFullscreen;

    if (requestMethod) { // Native full screen.
        requestMethod.call(el);
    } else if (typeof window.ActiveXObject !== "undefined") { // Older IE.
        var wscript = new ActiveXObject("WScript.Shell");
        if (wscript !== null) {
            wscript.SendKeys("{F11}");
        }
    }
    return false
};

/**
* GRIT.window.isFullScreen		: Full Screen 여부
* 	- param						: Null
* 	- return					: (Boolean) true/false
*
* 예) GRIT.window.isFullScreen();
*/
GRIT.window.isFullScreen = function() {
    return isInFullScreen = (document.fullScreenElement && document.fullScreenElement !== null) ||  (document.mozFullScreen || document.webkitIsFullScreen);
};

/**
* GRIT.window.toggleFull			: Full Screen Toggle 처리
* 	- param						: Null
* 	- return					: Null
*
* 예) GRIT.window.toggleFull();
*/
GRIT.window.toggleFull = function() {
    var elem = document.body; // Make the body go full screen.

    if (GRIT.window.isFullScreen()) {
    	GRIT.window.cancelFullScreen(document);
    } else {
    	GRIT.window.requestFullScreen(elem);
    }
    return false;
};

/**
* GRIT.window.showLoadingBar		: 로딩바 표시
* 	- param						: 없음
* 	- return					: 없음
*
* 예) GRIT.window.showLoadingBar();
*/
GRIT.window.showLoadingBar = function(targetComp) {
	var trgComp = targetComp || document.body;
    GRIT.window.inLoadingBarCount++;

    if(!trgComp._loadingBar) {
    	trgComp._loadingBar = document.createElement("div");
    	trgComp._loadingBar.style.boxSizing = 'border-box';
    	trgComp._loadingBar.style.position = 'absolute';
    	trgComp._loadingBar.className = 'loading-bar';
    }

    if(!trgComp.contains(trgComp._loadingBar)) {
    	trgComp.appendChild(trgComp._loadingBar)
    }
}

/**
* GRIT.window.hideLoadingBar		: 로딩바 제거
* 	- param						: 없음
* 	- return					: 없음
*
* 예) GRIT.window.hideLoadingBar();
*/
GRIT.window.hideLoadingBar = function(targetComp) {
	var trgComp = targetComp || document.body;
	GRIT.window.inLoadingBarCount--;

    //if(GRIT.window.inLoadingBarCount <= 0) {
        if(trgComp._loadingBar && trgComp.contains(trgComp._loadingBar)) {
        	trgComp.removeChild(trgComp._loadingBar);
        	GRIT.window.inLoadingBarCount = 0;
        }
    //}
}



/**
* GRIT.grid.getAnaPivotData		: 입력 데이터를 분석 Pivot Grid에 표시 가능한 데이터로 변환
* 	- param
* 		inputArray				: (Array) 입력 데이터
* 		yearFgArray				: (Array) 입력 데이터에서 년도구분으로 사용될 값 List
* 		yearNmArray				: (Array) 입력 데이터에서 년도구분으로 표시할 값 List
* 		yearKeyField			: (String) 입력 데이터에서 년도구분으로 사용될 Field
* 		groupKeyArray			: (Array) 입력 데이터에서 Group Key로 사용될 Field List
* 		pivotKeyField			: (String) 입력 데이터에서 Pivot으로 사용될 Field
* 		groupFieldArray			: (Array) 입력 데이터에서 Group Data로 표시할 Field List
* 		pivotListArray			: (Array) 입력 데이터에서 Pivot Field의 값 List
* 		valueFieldArray			: (Array) 입력 데이터에서 Value Data로 사용될 Field List
* 	- return					: (Array) 변환한 데이터
*
* 예) var pivotData = GRIT.grid.getAnaPivotData(data, ['CUR','PRE'], ['올해','전년'],'viewFg',['baCd'],'saleDt',['airportNm'],['20161101','20161102','....'],[totAmt']);
*/
GRIT.grid.getAnaPivotData2 = function(inputArray, yearFgArray, yearNmArray, yearKeyField, groupKeyArray, pivotKeyField, groupFieldArray, pivotListArray, valueFieldArray) {
	var iLen = inputArray.length;
    var yLen = yearFgArray.length;
    var gLen = groupFieldArray.length;
    var pLen = pivotListArray.length;
    var vLen = valueFieldArray.length;
    var recordData = {};
    var returnData = {},
        groupKey,
        pivotKey,
        defaultData = {},
        i, j, k;

    for(i = 0 ; i < pLen ; i++) {
        for(j = 0 ; j < vLen ; j++) {
            defaultData[valueFieldArray[j] + '^' + pivotListArray[i]] = 0;
        }
    }

    var tempSum = 0;
    var tempAvg = 0;
    for(i = 0 ; i < iLen ; i++) {
        recordData = inputArray[i];

        groupKey = GRIT.grid.getKey(recordData, groupKeyArray);

        if(!returnData[groupKey + '^' + yearFgArray[0]]) {
            for(j = 0 ; j < yLen ; j++) {
                returnData[groupKey + '^' + yearFgArray[j]] = $.extend({yearNm : yearNmArray[j]}, defaultData);

            	for(k = 0 ; k < gLen ; k++) {
            		//console.log("groupFieldArray[k]   > "+groupFieldArray[k]);
            		//console.log("recordData[groupFieldArray[k]]  > "+recordData[groupFieldArray[k]]);
            		if(groupFieldArray[k] != 'yearNm') {
            			if(groupFieldArray[k] == 'tempSum'){
	            			returnData[groupKey + '^' + yearFgArray[j]][groupFieldArray[k]] = recordData[groupFieldArray[k]];
            			} else if(groupFieldArray[k] == 'tempAvg'){
	            			returnData[groupKey + '^' + yearFgArray[j]][groupFieldArray[k]] = recordData[groupFieldArray[k]];
            			} else {
	            			returnData[groupKey + '^' + yearFgArray[j]][groupFieldArray[k]] = recordData[groupFieldArray[k]];
            				
            			}
            		}
                }
            }
        }

        //console.log("rowrowrowrowrowrowrow  > "+i);
        //console.log("recordData[amt]  > "+recordData['amt']);
        for(j = 0 ; j < vLen ; j++) {
            returnData[groupKey + '^' + recordData[yearKeyField]][valueFieldArray[j] + '^' + recordData[pivotKeyField]] += recordData[valueFieldArray[j]];
            //console.log("recordData[valueFieldArray[j]]  > "+recordData[valueFieldArray[j]]);
        }
        //console.log("recordData[totPsng]  > "+recordData['totPsng']);
        //console.log("returnData[totPsng]  > "+returnData['totPsng']);
    }

    rtnData = Object.values(returnData);
    //console.log("rtnData.length       >"+rtnData.length);
    
    for(var x = 0 ; x < rtnData.length ; x++){
    	var rowData = rtnData[x];
    	var tempSum = 0;
    	var tempAvg = 0;
    	var count = 0;
    	var tempTotPsng = 0;
    	for(var i in rowData){
    		//console.log(i + " - " + rowData[i]);
    		if(i.toLowerCase().indexOf("amt") > -1
    				|| i.toLowerCase().indexOf("psngqty") > -1){
    			//console.log(i + " - " + rowData[i]);
    			tempSum = tempSum + rowData[i];
    			count++;
    		}
    		if(i.toLowerCase().indexOf("passengerqty") > -1  ){
    			tempTotPsng = tempTotPsng + rowData[i];
    			//console.log("passengerqtypassengerqtypassengerqty      >"+rowData[i]);
    			//console.log("tempTotPsngtempTotPsngtempTotPsngtempTotPsngtempTotPsng      >"+tempTotPsng);
    		}
    	}
    	
    	/*
    	console.log("rowData       >"+rowData);
    	console.log("rowData[totPsngQty]       >"+rowData["totPsngQty"]);
    	console.log("rowData[totpsngqty]       >"+rtnData[x]["totpsngqty"]);
    	*/
    	//var tempTotPsng = rowData["totPsng"];
    	
    	rtnData[x]["tempPassengerSum"] = Number(tempTotPsng);
    	rtnData[x]["tempSum"] = Number(tempSum);
    	rtnData[x]["tempAvg"] = Math.round(Number(tempSum) / Number(count));
    	
    	if(tempTotPsng > 0){
    		rtnData[x]["tempPassengerUnitCost"] = Math.round(Number(tempSum) / Number(tempTotPsng));
    	} else {
    		rtnData[x]["tempPassengerUnitCost"] = Number(tempSum);
    	}
    }

    return rtnData;
};
